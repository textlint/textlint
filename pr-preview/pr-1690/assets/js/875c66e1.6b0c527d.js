"use strict";(self.webpackChunktextlint_website=self.webpackChunktextlint_website||[]).push([[4798],{6308:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>x,frontMatter:()=>r,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"plugin","title":"Plugin","description":"Each plugin is an npm module with a name in the format of textlint-plugin-.","source":"@site/../docs/plugin.md","sourceDirName":".","slug":"/plugin","permalink":"/textlint/pr-preview/pr-1690/docs/plugin","draft":false,"unlisted":false,"editUrl":"https://github.com/textlint/textlint/edit/master/docs/../docs/plugin.md","tags":[],"version":"current","lastUpdatedBy":"azu","lastUpdatedAt":1755095754000,"frontMatter":{"id":"plugin","title":"Plugin"},"sidebar":"docs","previous":{"title":"How to implement \\"after-all\\" in the rule?","permalink":"/textlint/pr-preview/pr-1690/docs/rule-tips-after-all"},"next":{"title":"Formatter","permalink":"/textlint/pr-preview/pr-1690/docs/formatter"}}');var i=t(1273),l=t(6719);const r={id:"plugin",title:"Plugin"},o=void 0,c={},a=[{value:"Processor",id:"processor",level:2},{value:"<code>availableExtensions(): string[]</code>",id:"availableextensions-string",level:3},{value:"<code>processor(ext)</code>",id:"processorext",level:3},{value:"<code>preProcess(text, filePath)</code>",id:"preprocesstext-filepath",level:4},{value:"text format",id:"text-format",level:5},{value:"binary format",id:"binary-format",level:5},{value:"<code>postProcess(messages, filePath)</code>",id:"postprocessmessages-filepath",level:4},{value:"Plugin configuration",id:"plugin-configuration",level:2},{value:"options",id:"options",level:3},{value:"Publishing",id:"publishing",level:2},{value:"Package name convention",id:"package-name-convention",level:3},{value:"Keywords",id:"keywords",level:3},{value:"Plugin Example",id:"plugin-example",level:2},{value:"Built-in plugin",id:"built-in-plugin",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Each plugin is an npm module with a name in the format of ",(0,i.jsx)(n.code,{children:"textlint-plugin-<plugin-name>"}),".\nFor example, ",(0,i.jsx)(n.code,{children:"@textlint/textlint-plugin-markdown"})," is a textlint plugin."]}),"\n",(0,i.jsx)(n.h2,{id:"processor",children:"Processor"}),"\n",(0,i.jsxs)(n.p,{children:["Plugin has a ",(0,i.jsx)(n.code,{children:"Processor"})," that is required."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// index.js\nexport default {\n    Processor: require("./YourProcessor")\n};\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Processor"})," class defined pre/post process of the file and available file types."]}),"\n",(0,i.jsxs)(n.p,{children:["textlint support ",(0,i.jsx)(n.code,{children:".txt"})," and ",(0,i.jsx)(n.code,{children:".md"})," by default. These are implemented as ",(0,i.jsx)(n.code,{children:"Processor"})," plugin."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/textlint/textlint/tree/master/packages/@textlint/textlint-plugin-markdown",children:"@textlint/textlint-plugin-markdown"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/textlint/textlint/tree/master/packages/@textlint/textlint-plugin-text",children:"@textlint/textlint-plugin-text"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/textlint/textlint-plugin-html",children:"textlint/textlint-plugin-html"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Processor"})," class example code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// TextProcessor.js\nimport { parse } from "txt-to-ast";\nexport default class TextProcessor {\n    constructor(options = {}) {\n        this.options = options;\n        // support "extension" option\n        this.extensions = options.extensions ? options.extensions : [];\n    }\n    // available ".ext" list\n    // user can add own custom extension as "extensions" option\n    availableExtensions() {\n        return [".txt", ".text"].concat(this.extensions);\n    }\n    // define pre/post process\n    // in other words, parse and generate process\n    processor(ext) {\n        return {\n            preProcess(text, filePath) {\n                // parsed result is an AST object\n                // AST is consist of TxtNode\n                // https://github.com/textlint/textlint/blob/master/docs/txtnode.md\n                return parse(text);\n            },\n            postProcess(messages, filePath) {\n                return {\n                    messages,\n                    filePath: filePath ? filePath : "<text>"\n                };\n            }\n        };\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Processor"})," class should implement these methods."]}),"\n",(0,i.jsx)(n.h3,{id:"availableextensions-string",children:(0,i.jsx)(n.code,{children:"availableExtensions(): string[]"})}),"\n",(0,i.jsx)(n.p,{children:"It should return supported extension name list."}),"\n",(0,i.jsx)(n.p,{children:"Notes:"}),"\n",(0,i.jsxs)(n.p,{children:["textlint versions 10 and above support ",(0,i.jsx)(n.code,{children:"static availableExtensions(): string[]"}),".\nThe static method is deprecated in textlint@11.\nyou should implement ",(0,i.jsx)(n.code,{children:"availableExtensions()"})," method as instance method."]}),"\n",(0,i.jsx)(n.h3,{id:"processorext",children:(0,i.jsx)(n.code,{children:"processor(ext)"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"processor()"})," method should return an object that have ",(0,i.jsx)(n.code,{children:"preProcess"})," and ",(0,i.jsx)(n.code,{children:"postProcess"})," method."]}),"\n",(0,i.jsx)(n.h4,{id:"preprocesstext-filepath",children:(0,i.jsx)(n.code,{children:"preProcess(text, filePath)"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"preProcess"})," method should return ",(0,i.jsx)(n.code,{children:"TxtParentNode"})," object or ",(0,i.jsx)(n.code,{children:"{ text: string, ast: TxtParentNode }"})," object.\nAlso, ",(0,i.jsx)(n.code,{children:"preProcess"})," method can return ",(0,i.jsx)(n.code,{children:"Promise<TxtParentNode> | Promise<{ text: string, ast: TxtParentNode }>"}),".\nIf you want to parse text asynchronous, please return an Promise object."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"TxtParentNode"})," object is an Abstract Syntax Tree (AST) of the text."]}),"\n",(0,i.jsxs)(n.p,{children:["You should check the AST using ",(0,i.jsx)(n.a,{href:"https://github.com/textlint/textlint/tree/master/packages/@textlint/ast-tester",title:"@textlint/ast-tester",children:"@textlint/ast-tester"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/textlint/textlint/tree/master/packages/@textlint/ast-tester",children:"textlint/@textlint/ast-tester: Compliance tests for textlint's AST"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'import { test, isTxtAST } from "@textlint/ast-tester";\n// your implement\nimport yourParse from "your-parser";\n// recommended: test much pattern test\nconst AST = yourParse("This is text");\n\n// Validate AST\ntest(AST); // if the AST is invalid, then throw Error\n\nisTxtAST(AST); // true or false\n'})}),"\n",(0,i.jsxs)(n.p,{children:["If you want to know ",(0,i.jsx)(n.code,{children:"TxtParentNode"}),", see ",(0,i.jsx)(n.a,{href:"/textlint/pr-preview/pr-1690/docs/txtnode",children:"TxtAST interface documents"}),"."]}),"\n",(0,i.jsx)(n.h5,{id:"text-format",children:"text format"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Target file(text format) -> AST(by your plugin) for Target file"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["If your plugin handle text format, you can just return a ",(0,i.jsx)(n.code,{children:"TxtParentNode"})," object."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'class ExampleProcessor {\n    availableExtensions() {\n        return [".example"];\n    }\n\n    processor() {\n        return {\n            preProcess() {\n                return AST_OBJECT;\n            },\n            postProcess(messages, filePath) {\n                return {\n                    filePath: filePath || "<example>",\n                    messages\n                };\n            }\n        };\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h5,{id:"binary-format",children:"binary format"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Target file(binary format) -> Intermediate text(by your plugin) -> AST(by your plugin) for Intermediate text"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["If your plugin handle intermediate text, you should return a ",(0,i.jsx)(n.code,{children:"{ text: string, ast: TxtParentNode }"})," object."]}),"\n",(0,i.jsx)(n.p,{children:"textlint can not handle a binary format, and your plugin should return intermediate text for your AST."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'class BinaryExampleProcessor {\n    availableExtensions() {\n        return [".binary-example"];\n    }\n\n    processor() {\n        return {\n            preProcess() {\n                return {\n                    text: PASUDUE_TEXT,\n                    ast: AST_OBJECT\n                };\n            },\n            postProcess(messages, filePath) {\n                return {\n                    filePath: filePath || "<example>",\n                    messages\n                };\n            }\n        };\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["For more details, see ",(0,i.jsx)(n.a,{href:"https://github.com/textlint/textlint/issues/649",children:"https://github.com/textlint/textlint/issues/649"})]}),"\n",(0,i.jsx)(n.h4,{id:"postprocessmessages-filepath",children:(0,i.jsx)(n.code,{children:"postProcess(messages, filePath)"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"postProcess"})," method should return ",(0,i.jsx)(n.code,{children:"{ messages, filePath }"}),".\nAlso, ",(0,i.jsx)(n.code,{children:"postProcess"})," method can return ",(0,i.jsx)(n.code,{children:"Promise<{ messages, filePath }>"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"filePath"})," argument may be undefined when text was input from stdin."]}),"\n",(0,i.jsx)(n.h2,{id:"plugin-configuration",children:"Plugin configuration"}),"\n",(0,i.jsx)(n.p,{children:"You can use Processor plugin in the same way a plugin."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'{\n    "plugins": [\n        "<Processor Plugin>"\n    ]\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"options",children:"options"}),"\n",(0,i.jsxs)(n.p,{children:["You can pass options to your plugin from ",(0,i.jsx)(n.code,{children:".textlintrc.json"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'{\n    "plugins": {\n        "pluginName": processorOption\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["You can receive the ",(0,i.jsx)(n.code,{children:"processorOption"})," via constructor arguments."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"export default class YourProcessor {\n    constructor(options) {\n        this.options = options; // <= processorOption!\n    }\n    // ...\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\ud83d\udcdd Processor's option value is ",(0,i.jsx)(n.code,{children:"{}"})," (empty object) by default.\nIf not set plugin's option in ",(0,i.jsx)(n.code,{children:".textlintrc.json"}),", textlint pass ",(0,i.jsx)(n.code,{children:"{}"})," as ",(0,i.jsx)(n.code,{children:"options"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"export default class YourProcessor {\n    constructor(options) {\n        this.options = options; // {}\n    }\n    // ...\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"publishing",children:"Publishing"}),"\n",(0,i.jsx)(n.p,{children:"If you want to publish your textlint plugin, see following documents."}),"\n",(0,i.jsx)(n.h3,{id:"package-name-convention",children:"Package name convention"}),"\n",(0,i.jsxs)(n.p,{children:["textlint plugin package naming should have ",(0,i.jsx)(n.code,{children:"textlint-plugin-"})," prefix."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"textlint-plugin-<name>"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@scope/textlint-plugin-<name>"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["textlint supports ",(0,i.jsx)(n.a,{href:"https://docs.npmjs.com/misc/scope",title:"Scoped packages",children:"Scoped packages"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Example: ",(0,i.jsx)(n.code,{children:"@textlint/textlint-plugin-markdown"})]}),"\n",(0,i.jsx)(n.p,{children:"textlint user use it by setting following:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "plugins": {\n        "@textlint/markdown": true\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Also, textlint user can set options to the plugin."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "plugins": {\n      "@textlint/markdown": {\n        "extensions": [".custom-ext"]\n      }\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"keywords",children:"Keywords"}),"\n",(0,i.jsxs)(n.p,{children:["You should add ",(0,i.jsx)(n.code,{children:"textlintplugin"})," to npm's ",(0,i.jsx)(n.code,{children:"keywords"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "name": "textlint-plugin-format-name",\n  "keywords": [\n    "textlintplugin"\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"plugin-example",children:"Plugin Example"}),"\n",(0,i.jsx)(n.p,{children:"(limited) XML plugin"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/azu/textlint-plugin-xml-example",title:"azu/textlint-plugin-xml-example",children:"azu/textlint-plugin-xml-example"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["For more plugins, See ",(0,i.jsx)(n.a,{href:"https://github.com/textlint/textlint/wiki/Collection-of-textlint-rule#processor-plugin-list",title:"Processor Plugin List",children:"Processor Plugin List"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"built-in-plugin",children:"Built-in plugin"}),"\n",(0,i.jsx)(n.p,{children:"textlint has built-in plugins"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/textlint/textlint/tree/master/packages/@textlint/textlint-plugin-text",children:(0,i.jsx)(n.code,{children:"@textlint/textlint-plugin-text"})})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/textlint/textlint/tree/master/packages/@textlint/textlint-plugin-markdown",children:(0,i.jsx)(n.code,{children:"@textlint/textlint-plugin-markdown"})})}),"\n"]})]})}function x(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},6719:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(3917);const i={},l=s.createContext(i);function r(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);