"use strict";(self.webpackChunktextlint_website=self.webpackChunktextlint_website||[]).push([[7091],{6173:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"mcp","title":"textlint MCP Server Setup","description":"Model Context Protocol (MCP) is an open standard that enables AI models to interact with external tools and services through a unified interface. textlint CLI contains an MCP server that you can register with your code editor to allow LLMs to use textlint directly.","source":"@site/../docs/mcp.md","sourceDirName":".","slug":"/mcp","permalink":"/textlint/pr-preview/pr-1717/docs/mcp","draft":false,"unlisted":false,"editUrl":"https://github.com/textlint/textlint/edit/master/docs/../docs/mcp.md","tags":[],"version":"current","lastUpdatedBy":"renovate[bot]","lastUpdatedAt":1756529316000,"frontMatter":{},"sidebar":"docs","previous":{"title":"Integrating with Editors, CI, Tools, etc..","permalink":"/textlint/pr-preview/pr-1717/docs/integrations"},"next":{"title":"Creating Rules","permalink":"/textlint/pr-preview/pr-1717/docs/rule"}}');var s=t(1273),r=t(6719);const l={},o="textlint MCP Server Setup",c={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Using CLI Flags with MCP",id:"using-cli-flags-with-mcp",level:2},{value:"Supported CLI Flags with MCP",id:"supported-cli-flags-with-mcp",level:3},{value:"Setup in Different Editors",id:"setup-in-different-editors",level:2},{value:"VS Code with GitHub Copilot",id:"vs-code-with-github-copilot",level:3},{value:"Cursor",id:"cursor",level:3},{value:"Windsurf",id:"windsurf",level:3},{value:"Claude Code",id:"claude-code",level:3},{value:"Using Claude Code CLI",id:"using-claude-code-cli",level:4},{value:"Manual Configuration",id:"manual-configuration",level:4},{value:"Available Tools",id:"available-tools",level:2},{value:"<code>lintFile</code>",id:"lintfile",level:3},{value:"<code>lintText</code>",id:"linttext",level:3},{value:"<code>getLintFixedFileContent</code>",id:"getlintfixedfilecontent",level:3},{value:"<code>getLintFixedTextContent</code>",id:"getlintfixedtextcontent",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Setting up textlint (Required)",id:"setting-up-textlint-required",level:3},{value:"Example Prompts",id:"example-prompts",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Additional Resources",id:"additional-resources",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"textlint-mcp-server-setup",children:"textlint MCP Server Setup"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://modelcontextprotocol.io/",children:"Model Context Protocol"})," (MCP) is an open standard that enables AI models to interact with external tools and services through a unified interface. textlint CLI contains an MCP server that you can register with your code editor to allow LLMs to use textlint directly."]}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"textlint v14.8.0 or later"}),"\n",(0,s.jsx)(n.li,{children:"AI-powered code editor with MCP support (VS Code with Copilot Chat, Cursor, Windsurf, or Claude Code)"}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"A configured textlint project"})," - The MCP server requires an existing textlint configuration since textlint has no default rules"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,s.jsxs)(n.p,{children:["First, you need to set up textlint in your project. textlint has no default rules, so you must configure rules before using the MCP server. See the ",(0,s.jsx)(n.a,{href:"/textlint/pr-preview/pr-1717/docs/configuring",children:"Configuring textlint"})," guide for setup instructions."]}),"\n",(0,s.jsx)(n.p,{children:"After setting up textlint, start the MCP server with:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npx textlint --mcp\n"})}),"\n",(0,s.jsx)(n.p,{children:"This starts textlint as an MCP server using stdio transport, allowing AI assistants to interact with textlint's linting and fixing capabilities."}),"\n",(0,s.jsx)(n.h2,{id:"using-cli-flags-with-mcp",children:"Using CLI Flags with MCP"}),"\n",(0,s.jsxs)(n.p,{children:["Starting with textlint v15.2.0, the ",(0,s.jsx)(n.code,{children:"--mcp"})," flag supports combination with other CLI arguments for enhanced flexibility. You can now pass additional configuration options when starting the MCP server:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Use a specific config file\nnpx textlint --mcp --config .textlintrc.dev.json\n\n# Use a custom ignore file\nnpx textlint --mcp --ignore-path .textlintignore.dev\n\n# Combine with quiet mode (errors only)\nnpx textlint --mcp --quiet\n\n# Use a custom rules directory\nnpx textlint --mcp --rules-base-directory ./custom-node-modules\n\n# Combine multiple options\nnpx textlint --mcp --config .textlintrc.dev.json --quiet --ignore-path .textlintignore.dev\n"})}),"\n",(0,s.jsx)(n.h3,{id:"supported-cli-flags-with-mcp",children:"Supported CLI Flags with MCP"}),"\n",(0,s.jsxs)(n.p,{children:["The following CLI flags can be combined with ",(0,s.jsx)(n.code,{children:"--mcp"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--config <path>"}),": Specify a custom configuration file path"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--ignore-path <path>"}),": Specify a custom ",(0,s.jsx)(n.code,{children:".textlintignore"})," file path"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--quiet"}),": Report errors only (suppress warnings)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"--rules-base-directory <path>"}),": Set custom node_modules directory for loading rules"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["These options provide the same functionality as the ",(0,s.jsx)(n.code,{children:"McpServerOptions"})," type and allow for more flexible MCP server configuration without needing to modify your codebase."]}),"\n",(0,s.jsx)(n.h2,{id:"setup-in-different-editors",children:"Setup in Different Editors"}),"\n",(0,s.jsx)(n.h3,{id:"vs-code-with-github-copilot",children:"VS Code with GitHub Copilot"}),"\n",(0,s.jsxs)(n.p,{children:["To configure textlint MCP server in VS Code, create a ",(0,s.jsx)(n.code,{children:".vscode/mcp.json"})," file in your project:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "servers": {\n        "textlint": {\n            "type": "stdio",\n            "command": "npx",\n            "args": ["textlint", "--mcp"]\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"For custom configuration with CLI flags:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "servers": {\n        "textlint": {\n            "type": "stdio",\n            "command": "npx",\n            "args": ["textlint", "--mcp", "--config", ".textlintrc.dev.json", "--quiet"]\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Alternatively, you can use the Command Palette:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Press ",(0,s.jsx)(n.code,{children:"Ctrl+Shift+P"})," (Windows/Linux) or ",(0,s.jsx)(n.code,{children:"Cmd+Shift+P"})," (macOS)"]}),"\n",(0,s.jsxs)(n.li,{children:["Type and select ",(0,s.jsx)(n.code,{children:"MCP: Add Server"})]}),"\n",(0,s.jsxs)(n.li,{children:["Select ",(0,s.jsx)(n.code,{children:"Command (stdio)"})," from the dropdown"]}),"\n",(0,s.jsxs)(n.li,{children:["Enter ",(0,s.jsx)(n.code,{children:"npx textlint --mcp"})," as the command"]}),"\n",(0,s.jsxs)(n.li,{children:["Type ",(0,s.jsx)(n.code,{children:"textlint"})," as the server ID"]}),"\n",(0,s.jsxs)(n.li,{children:["Choose ",(0,s.jsx)(n.code,{children:"Workspace Settings"})," to create the configuration in ",(0,s.jsx)(n.code,{children:".vscode/mcp.json"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"cursor",children:"Cursor"}),"\n",(0,s.jsxs)(n.p,{children:["Create a ",(0,s.jsx)(n.code,{children:".cursor/mcp.json"})," file in your project directory:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "mcpServers": {\n        "textlint": {\n            "command": "npx",\n            "args": ["textlint", "--mcp"],\n            "env": {}\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"For custom configuration with CLI flags:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "mcpServers": {\n        "textlint": {\n            "command": "npx",\n            "args": ["textlint", "--mcp", "--config", ".textlintrc.dev.json", "--quiet"],\n            "env": {}\n        }\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["For global configuration, create ",(0,s.jsx)(n.code,{children:"~/.cursor/mcp.json"})," in your home directory with the same configuration."]}),"\n",(0,s.jsx)(n.h3,{id:"windsurf",children:"Windsurf"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Navigate to Windsurf \u2192 Settings \u2192 Advanced Settings"}),"\n",(0,s.jsx)(n.li,{children:'Scroll down to the Cascade section and click "Add Server"'}),"\n",(0,s.jsx)(n.li,{children:'Select "Add custom server +"'}),"\n",(0,s.jsxs)(n.li,{children:["Add the following configuration to your ",(0,s.jsx)(n.code,{children:"~/.codeium/windsurf/mcp_config.json"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "mcpServers": {\n        "textlint": {\n            "command": "npx",\n            "args": ["textlint", "--mcp"],\n            "env": {}\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"For custom configuration with CLI flags:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "mcpServers": {\n        "textlint": {\n            "command": "npx",\n            "args": ["textlint", "--mcp", "--config", ".textlintrc.dev.json", "--quiet"],\n            "env": {}\n        }\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"5",children:["\n",(0,s.jsx)(n.li,{children:"Press the refresh button to update the available MCP servers"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"claude-code",children:"Claude Code"}),"\n",(0,s.jsx)(n.p,{children:"Claude Code automatically discovers MCP servers registered in various configuration locations."}),"\n",(0,s.jsx)(n.h4,{id:"using-claude-code-cli",children:"Using Claude Code CLI"}),"\n",(0,s.jsxs)(n.p,{children:["The easiest way to add textlint MCP server is using the ",(0,s.jsx)(n.code,{children:"mcp add"})," command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Add textlint MCP server to your project\ncd /path/to/your/project\nclaude mcp add textlint -- npx textlint --mcp\n"})}),"\n",(0,s.jsx)(n.p,{children:"For custom configuration with CLI flags:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"claude mcp add textlint -- npx textlint --mcp --config .textlintrc.dev.json --quiet\n"})}),"\n",(0,s.jsx)(n.h4,{id:"manual-configuration",children:"Manual Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["Alternatively, create a ",(0,s.jsx)(n.code,{children:".claude/mcp.json"})," file in your project directory:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "servers": {\n        "textlint": {\n            "command": "npx",\n            "args": ["textlint", "--mcp"],\n            "env": {}\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"For custom configuration with CLI flags:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "servers": {\n        "textlint": {\n            "command": "npx",\n            "args": ["textlint", "--mcp", "--config", ".textlintrc.dev.json", "--quiet"],\n            "env": {}\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"available-tools",children:"Available Tools"}),"\n",(0,s.jsx)(n.p,{children:"The textlint MCP server provides four main tools:"}),"\n",(0,s.jsx)(n.h3,{id:"lintfile",children:(0,s.jsx)(n.code,{children:"lintFile"})}),"\n",(0,s.jsx)(n.p,{children:"Lint one or more files using textlint configuration."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"filePaths"})," (Array): File paths to lint"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'"Lint the current file for text issues"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"linttext",children:(0,s.jsx)(n.code,{children:"lintText"})}),"\n",(0,s.jsx)(n.p,{children:"Lint raw text content using textlint configuration."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"text"})," (String): Text content to lint"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"stdinFilename"})," (String): Filename to use for the text (affects rule application)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\"Check this text for writing issues: 'This is a sample text.'\"\n"})}),"\n",(0,s.jsx)(n.h3,{id:"getlintfixedfilecontent",children:(0,s.jsx)(n.code,{children:"getLintFixedFileContent"})}),"\n",(0,s.jsx)(n.p,{children:"Get lint-fixed content of files using textlint's auto-fix capability. This tool returns the corrected content without modifying the original files."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"filePaths"})," (Array): File paths to get fixed content for"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'"Get the textlint auto-fixed version of the current file"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"getlintfixedtextcontent",children:(0,s.jsx)(n.code,{children:"getLintFixedTextContent"})}),"\n",(0,s.jsx)(n.p,{children:"Get lint-fixed content of raw text using textlint's auto-fix capability."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"text"})," (String): Text content to get fixed version of"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"stdinFilename"})," (String): Filename to use for the text"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'"Get the auto-fixed version of this text and show me the corrected content"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Important"}),": The textlint MCP server requires an existing textlint configuration to function properly. textlint doesn't include any rules by default, so you must configure your project before using the MCP server."]}),"\n",(0,s.jsx)(n.p,{children:"The textlint MCP server uses your existing textlint configuration:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:".textlintrc.json"})," or other textlint config files"]}),"\n",(0,s.jsx)(n.li,{children:"Installed textlint rules and plugins"}),"\n",(0,s.jsx)(n.li,{children:"Standard textlint ignore patterns"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"setting-up-textlint-required",children:"Setting up textlint (Required)"}),"\n",(0,s.jsx)(n.p,{children:"Before using the MCP server, make sure you have:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"A textlint configuration file"})," in your project (",(0,s.jsx)(n.code,{children:".textlintrc.json"}),", ",(0,s.jsx)(n.code,{children:".textlintrc.js"}),", etc.)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Required textlint rules installed"})," as dependencies"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Appropriate plugins"})," for your file types"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["For detailed configuration instructions, see ",(0,s.jsx)(n.a,{href:"/textlint/pr-preview/pr-1717/docs/configuring",children:"Configuring textlint"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"example-prompts",children:"Example Prompts"}),"\n",(0,s.jsx)(n.p,{children:"Here are some example prompts you can use with AI assistants:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Lint the current file with textlint MCP and explain any text issues found\n\nGet the auto-fixed content for src/README.md using textlint\n\nCheck this markdown text for writing problems and show me the corrected version\n\nGet textlint auto-fixed content for all files in the docs/ directory\n"})}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.p,{children:"If you encounter issues with the textlint MCP server:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Check MCP server status"}),": Use your editor's MCP server list/status feature"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Verify textlint installation"}),": Ensure textlint and your rules are properly installed"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Check configuration"}),": Verify your ",(0,s.jsx)(n.code,{children:".textlintrc"})," file is valid"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Review logs"}),": Check MCP server logs for error messages"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Test manually"}),": Try running ",(0,s.jsx)(n.code,{children:"npx textlint --mcp"})," in your terminal to see if the server starts"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Common issues:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Missing textlint configuration file"}),"\n",(0,s.jsx)(n.li,{children:"Uninstalled textlint rules or plugins"}),"\n",(0,s.jsx)(n.li,{children:"Incorrect file paths in MCP configuration"}),"\n",(0,s.jsx)(n.li,{children:"Version compatibility (requires textlint v14.8.0+)"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://textlint.github.io/",children:"textlint Documentation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://modelcontextprotocol.io/introduction",children:"Model Context Protocol Documentation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://code.visualstudio.com/docs/copilot/chat/mcp-servers",children:"VS Code MCP Servers Documentation"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://docs.anthropic.com/en/docs/claude-code/mcp",children:"Claude Code MCP Documentation"})," - Claude Code MCP integration guide"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/textlint/textlint/pull/1522",children:"GitHub Pull Request #1522"})," - Original MCP implementation"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"References:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/textlint/textlint/pull/1522",children:"https://github.com/textlint/textlint/pull/1522"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://eslint.org/docs/latest/use/mcp",children:"https://eslint.org/docs/latest/use/mcp"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},6719:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var i=t(3917);const s={},r=i.createContext(s);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);