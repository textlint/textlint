"use strict";(self.webpackChunktextlint_website=self.webpackChunktextlint_website||[]).push([[8664],{4318:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var i=n(4700);const l={},s=i.createContext(l);function r(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),i.createElement(s.Provider,{value:t},e.children)}},8397:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>x,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"use-as-modules","title":"Use as Node Modules","description":"Overview","source":"@site/../docs/use-as-modules.md","sourceDirName":".","slug":"/use-as-modules","permalink":"/textlint/pr-preview/pr-1583/docs/use-as-modules","draft":false,"unlisted":false,"editUrl":"https://github.com/textlint/textlint/edit/master/docs/../docs/use-as-modules.md","tags":[],"version":"current","lastUpdatedBy":"azu","lastUpdatedAt":1750598094000,"frontMatter":{"id":"use-as-modules","title":"Use as Node Modules"},"sidebar":"docs","previous":{"title":"Formatter","permalink":"/textlint/pr-preview/pr-1583/docs/formatter"},"next":{"title":"TxtAST Interface","permalink":"/textlint/pr-preview/pr-1583/docs/txtnode"}}');var l=n(7968),s=n(4318);const r={id:"use-as-modules",title:"Use as Node Modules"},o=void 0,c={},d=[{value:"Overview",id:"overview",level:2},{value:"CLI (Command Line Interface)",id:"cli-command-line-interface",level:3},{value:"Modern APIs (v15+)",id:"modern-apis-v15",level:2},{value:"Core Functions",id:"core-functions",level:3},{value:"Key Concepts",id:"key-concepts",level:3},{value:"Examples",id:"examples",level:2},{value:"Lint files and output to console",id:"lint-files-and-output-to-console",level:3},{value:"Fix text and get the fixed text",id:"fix-text-and-get-the-fixed-text",level:3},{value:"Add custom rules and plugins",id:"add-custom-rules-and-plugins",level:2},{value:"Get lintable file extensions",id:"get-lintable-file-extensions",level:2},{value:"Want to know the file path is lintable or not",id:"want-to-know-the-file-path-is-lintable-or-not",level:2}];function a(e){const t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,l.jsxs)(t.p,{children:[(0,l.jsx)(t.code,{children:"textlint"})," package provides High-Level APIs for integrating textlint into your applications."]}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:["If you want to load ",(0,l.jsx)(t.code,{children:".textlintrc"})," configuration, use the ",(0,l.jsx)(t.code,{children:"textlint"})," package"]}),"\n",(0,l.jsxs)(t.li,{children:["If you need lower-level control without ",(0,l.jsx)(t.code,{children:".textlintrc"}),", use the ",(0,l.jsx)(t.code,{children:"@textlint/kernel"})," package directly"]}),"\n"]}),"\n",(0,l.jsxs)(t.blockquote,{children:["\n",(0,l.jsxs)(t.p,{children:[(0,l.jsx)(t.strong,{children:"Note:"})," textlint v15.0.0 removed all deprecated legacy APIs (",(0,l.jsx)(t.code,{children:"textlint"}),", ",(0,l.jsx)(t.code,{children:"TextLintEngine"}),", ",(0,l.jsx)(t.code,{children:"TextFixEngine"}),", and ",(0,l.jsx)(t.code,{children:"TextLintCore"}),"). If you're migrating from these APIs, see the ",(0,l.jsx)(t.a,{href:"/textlint/pr-preview/pr-1583/docs/migration-to-v15",children:"migration guide"}),"."]}),"\n"]}),"\n",(0,l.jsx)(t.h3,{id:"cli-command-line-interface",children:"CLI (Command Line Interface)"}),"\n",(0,l.jsx)(t.p,{children:"The CLI interface provides programmatic access to textlint's command-line functionality:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-js",children:'import { cli } from "textlint";\nconst result = await cli.execute(`./README.md --rule textlint-rule-no-todo`);\nassert.strictEqual(result, 0); // 0 = success, 1 = lint errors, 2 = fatal errors\n'})}),"\n",(0,l.jsx)(t.h2,{id:"modern-apis-v15",children:"Modern APIs (v15+)"}),"\n",(0,l.jsx)(t.p,{children:"The modern textlint API provides these core functions:"}),"\n",(0,l.jsx)(t.h3,{id:"core-functions",children:"Core Functions"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:["\n",(0,l.jsxs)(t.p,{children:[(0,l.jsx)(t.strong,{children:(0,l.jsx)(t.code,{children:"createLinter(options)"})}),": Creates a linter instance"]}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"lintFiles(files): Promise<TextlintResult[]>"}),": Lint multiple files"]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"lintText(text, filePath): Promise<TextlintResult>"}),": Lint text content with a virtual file path"]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"fixFiles(files): Promise<TextlintFixResult[]>"}),": Auto-fix multiple files"]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"fixText(text, filePath): Promise<TextlintFixResult>"}),": Auto-fix text content"]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"scanFilePath(filePath): Promise<ScanFilePathResult>"}),": Check if a file path is lintable"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(t.li,{children:["\n",(0,l.jsxs)(t.p,{children:[(0,l.jsx)(t.strong,{children:(0,l.jsx)(t.code,{children:"loadTextlintrc(options?)"})}),": Load ",(0,l.jsx)(t.code,{children:".textlintrc"})," configuration file"]}),"\n"]}),"\n",(0,l.jsxs)(t.li,{children:["\n",(0,l.jsxs)(t.p,{children:[(0,l.jsx)(t.strong,{children:(0,l.jsx)(t.code,{children:"loadLinterFormatter(options)"})}),": Load output formatter for lint results"]}),"\n"]}),"\n",(0,l.jsxs)(t.li,{children:["\n",(0,l.jsxs)(t.p,{children:[(0,l.jsx)(t.strong,{children:(0,l.jsx)(t.code,{children:"loadFixerFormatter(options)"})}),": Load output formatter for fix results"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(t.h3,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Virtual File Paths"}),": The ",(0,l.jsx)(t.code,{children:"filePath"})," parameter in ",(0,l.jsx)(t.code,{children:"lintText()"})," and ",(0,l.jsx)(t.code,{children:"fixText()"})," doesn't need to be a real file. It should hint at the content type (e.g., ",(0,l.jsx)(t.code,{children:"document.md"})," for Markdown content)."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Immutable Operations"}),": ",(0,l.jsx)(t.code,{children:"fixFiles()"})," and ",(0,l.jsx)(t.code,{children:"fixText()"})," return fix results but don't modify files directly."]}),"\n"]}),"\n",(0,l.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,l.jsx)(t.h3,{id:"lint-files-and-output-to-console",children:"Lint files and output to console"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-ts",children:'import { createLinter, loadTextlintrc, loadLinterFormatter } from "textlint";\n// descriptor is a structure object for linter\n// It includes rules, plugins, and options\nconst descriptor = await loadTextlintrc();\nconst linter = createLinter({\n    descriptor\n});\nconst results = await linter.lintFiles(["*.md"]);\n// textlint has two types formatter sets for linter and fixer\nconst formatter = await loadLinterFormatter({ formatterName: "stylish" });\nconst output = formatter.format(results);\nconsole.log(output);\n'})}),"\n",(0,l.jsx)(t.h3,{id:"fix-text-and-get-the-fixed-text",children:"Fix text and get the fixed text"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-ts",children:'import { createLinter, loadTextlintrc } from "textlint";\n// descriptor is a structure object for linter\n// It includes rules, plugins, and options\nconst descriptor = await loadTextlintrc();\nconst linter = createLinter({\n    descriptor\n});\nconst result = await linter.fixText("TODO: fix me", "DUMMY.md");\nconsole.log(result.output); // fixed result\n'})}),"\n",(0,l.jsx)(t.h2,{id:"add-custom-rules-and-plugins",children:"Add custom rules and plugins"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-ts",children:'import { createLinter, loadTextlintrc } from "textlint";\nimport { TextlintKernelDescriptor } from "@textlint/kernel";\nimport { moduleInterop } from "@textlint/module-interop";\n// Create a descriptor for custom rules and plugins\nconst customDescriptor = new TextlintKernelDescriptor({\n    rules: [\n        {\n            ruleId: "custom-rule",\n            rule: moduleInterop((await import("./custom-plugin")).default)\n        }\n    ],\n    plugins: [\n        {\n            pluginId: "custom-plugin",\n            plugin: moduleInterop((await import("./custom-plugin")).default)\n        }\n    ]\n});\nconst textlintrcDescriptor = await loadTextlintrc();\nconst linter = createLinter({\n    // merge customDescriptor and textlintrcDescriptor\n    // if same ruleId or pluginId, customDescriptor is used.\n    descriptor: customDescriptor.concat(textlintrcDescriptor)\n});\n\n// The second param should be a filename whose extension hints at the type\n// of content being passed to lintText(), e.g. README.md for Markdown.\nconst result = await linter.lintText("TODO: fix me", "README.md");\nconsole.log(result);\n\n'})}),"\n",(0,l.jsx)(t.h2,{id:"get-lintable-file-extensions",children:"Get lintable file extensions"}),"\n",(0,l.jsxs)(t.p,{children:[(0,l.jsx)(t.code,{children:"textlintrcDescriptor.availableExtensions"})," provide list of supported file extensions."]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-ts",children:'import { createLinter, loadTextlintrc } from "textlint";\nconst textlintrcDescriptor = await loadTextlintrc();\nconst availableExtensions = textlintrcDescriptor.availableExtensions;\nconsole.log(availableExtensions); // => [".md", ".txt"]\n'})}),"\n",(0,l.jsx)(t.h2,{id:"want-to-know-the-file-path-is-lintable-or-not",children:"Want to know the file path is lintable or not"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-ts",children:'import { createLinter, loadTextlintrc } from "textlint";\nconst textlintrcDescriptor = await loadTextlintrc();\nconst linter = createLinter({\n    descriptor: textlintrcDescriptor\n});\nconst result = await linter.scanFilePath("README.md");\n// result.status is "ok" or "ignored" or "error"\nif (result.status === "ok") {\n    const lintResult = await linter.lintText("README content", "README.md");\n    console.log(lintResult);\n## Testing\n\nYou can use [textlint-tester](https://www.npmjs.com/package/textlint-tester) for testing your custom rule.\n\n- [rule.md](./rule.md)\n- [textlint-tester](https://www.npmjs.com/package/textlint-tester "textlint-tester")\n\nConsult link:\n\n- [spellcheck-tech-word-textlint-rule/test.js at master \xb7 azu/spellcheck-tech-word-textlint-rule](https://github.com/azu/textlint-rule-spellcheck-tech-word/blob/master/test/test.js "spellcheck-tech-word-textlint-rule/test.js at master \xb7 azu/spellcheck-tech-word-textlint-rule")\n'})})]})}function x(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(a,{...e})}):a(e)}}}]);