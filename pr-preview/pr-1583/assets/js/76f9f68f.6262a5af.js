"use strict";(self.webpackChunktextlint_website=self.webpackChunktextlint_website||[]).push([[6301],{4318:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var r=t(4700);const o={},i=r.createContext(o);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:n},e.children)}},6632:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"rule-advanced","title":"Advanced: Paragraph Rule","description":"Readme","source":"@site/../docs/rule-advanced.md","sourceDirName":".","slug":"/rule-advanced","permalink":"/textlint/pr-preview/pr-1583/docs/rule-advanced","draft":false,"unlisted":false,"editUrl":"https://github.com/textlint/textlint/edit/master/docs/../docs/rule-advanced.md","tags":[],"version":"current","lastUpdatedBy":"azu","lastUpdatedAt":1750598094000,"frontMatter":{"id":"rule-advanced","title":"Advanced: Paragraph Rule"},"sidebar":"docs","previous":{"title":"Creating Preset","permalink":"/textlint/pr-preview/pr-1583/docs/rule-preset"},"next":{"title":"How to implement \\"after-all\\" in the rule?","permalink":"/textlint/pr-preview/pr-1583/docs/rule-tips-after-all"}}');var o=t(7968),i=t(4318);const s={id:"rule-advanced",title:"Advanced: Paragraph Rule"},l=void 0,a={},c=[{value:"Readme",id:"readme",level:2},{value:"Using Code Examples",id:"using-code-examples",level:2},{value:"Using Library",id:"using-library",level:2},{value:"Terms",id:"terms",level:2},{value:"1. Start",id:"1-start",level:2},{value:"2. Ignore <code>Code</code> node",id:"2-ignore-code-node",level:3},{value:"3. Get text of a Paragraph",id:"3-get-text-of-a-paragraph",level:3},{value:"4. Create Sentences from Paragraph",id:"4-create-sentences-from-paragraph",level:3},{value:"4. Get words in a sentence",id:"4-get-words-in-a-sentence",level:3},{value:"Testing",id:"testing",level:2},{value:"Complete!",id:"complete",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"readme",children:"Readme"}),"\n",(0,o.jsx)(n.p,{children:"You have already read following document."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/textlint/pr-preview/pr-1583/docs/rule",children:"Creating Rules"})}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["This tutorial describe that creating a rule to handle ",(0,o.jsx)(n.code,{children:"Paragraph"})," nodes."]}),"\n",(0,o.jsx)(n.h2,{id:"using-code-examples",children:"Using Code Examples"}),"\n",(0,o.jsx)(n.p,{children:"You can see finished module in the tutorial."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/azu/textlint-rule-en-max-word-count",title:"textlint-rule-en-max-word-count",children:"textlint-rule-en-max-word-count"})}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["The rule that specify the maximum word count of a ",(0,o.jsx)(n.strong,{children:"sentence"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"using-library",children:"Using Library"}),"\n",(0,o.jsx)(n.p,{children:"These library are used in the module."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://www.npmjs.com/package/sentence-splitter",children:"sentence-splitter"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://www.npmjs.com/package/textlint-util-to-string",children:"textlint-util-to-string"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://www.npmjs.com/package/unist-util-map",children:"unist-util-map"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://www.npmjs.com/package/split-string-words",children:"split-string-words"})}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"terms",children:"Terms"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Paragraph"})," is a type of ",(0,o.jsx)(n.a,{href:"/textlint/pr-preview/pr-1583/docs/txtnode#txtparentnode",children:(0,o.jsx)(n.code,{children:"TxtParentNode"})}),".\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Paragraph has ",(0,o.jsx)(n.code,{children:"children"})," nodes."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Sentence"})," is not defined in textlint.\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"It has language dependency."}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://github.com/azu/textlint-rule-en-max-word-count",title:"textlint-rule-en-max-word-count",children:"textlint-rule-en-max-word-count"})," is for English."]}),"\n",(0,o.jsxs)(n.li,{children:["It is created from ",(0,o.jsx)(n.strong,{children:"Paragraph"})," text by ",(0,o.jsx)(n.a,{href:"https://www.npmjs.com/package/sentence-splitter",children:"sentence-splitter"})]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Word"})," is not defined in textlint.\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"It has language dependency."}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://github.com/azu/textlint-rule-en-max-word-count",title:"textlint-rule-en-max-word-count",children:"textlint-rule-en-max-word-count"})," is for English."]}),"\n",(0,o.jsxs)(n.li,{children:["It is created from ",(0,o.jsx)(n.strong,{children:"Sentence"})," text by ",(0,o.jsx)(n.a,{href:"https://www.npmjs.com/package/split-string-words",children:"split-string-words"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"1-start",children:"1. Start"}),"\n",(0,o.jsxs)(n.p,{children:["To create a rule that specify the maximum ",(0,o.jsx)(n.strong,{children:"word"})," count of a ",(0,o.jsx)(n.strong,{children:"sentence"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"// Default options\nconst defaultOptions = {\n    // max count of words >\n    max: 50\n};\n/**\n * @param {TextLintRuleContext} context\n * @param {Object} options\n */\nexport default function (context, options = {}) {\n    const { Syntax, getSource, RuleError, report } = context;\n    const maxWordCount = options.max ? options.max : defaultOptions.max;\n    return {\n        [Syntax.Paragraph](node) {\n            // node is Paragraph node\n            // Paragraph contain `Code`, `Str`, `Strong` node etc...\n        }\n    };\n}\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"2-ignore-code-node",children:["2. Ignore ",(0,o.jsx)(n.code,{children:"Code"})," node"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"Paragraph"})," node contain ",(0,o.jsx)(n.code,{children:"Code"}),", ",(0,o.jsx)(n.code,{children:"Str"}),", ",(0,o.jsx)(n.code,{children:"Strong"})," node etc..."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"This is text.\n"})}),"\n",(0,o.jsxs)(n.p,{children:["is described as ",(0,o.jsx)(n.code,{children:'Paragraph.children = ["Str"]'})]}),"\n",(0,o.jsx)(n.p,{children:"\u2139\ufe0f Info:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Please see ",(0,o.jsx)(n.a,{href:"/textlint/pr-preview/pr-1583/docs/txtnode",children:"txtnode.md"})," for Abstract Syntax Tree details."]}),"\n",(0,o.jsxs)(n.li,{children:["Use ",(0,o.jsx)(n.a,{href:"http://azu.github.io/markdown-to-ast/example/",children:"Markdown-to-AST demo"})]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["But, Following ",(0,o.jsx)(n.code,{children:"Paragraph"})," node contain ",(0,o.jsx)(n.code,{children:"Code"})," node."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'This text contain `var a = "string";` code.\n'})}),"\n",(0,o.jsxs)(n.p,{children:["How do you handle ",(0,o.jsx)(n.code,{children:"Code"})," node?"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Ignore ",(0,o.jsx)(n.code,{children:"Code"}),".\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://github.com/textlint-rule/textlint-rule-rousseau",title:"textlint-rule-rousseau",children:"textlint-rule-rousseau"})," apply ignoring pattern."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://github.com/textlint/textlint-rule-helper",title:"textlint-rule-helper",children:"textlint-rule-helper"})," provide ",(0,o.jsx)(n.code,{children:"IgnoreNodeManger"})," that is useful for ignoring some node."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Replace ",(0,o.jsx)(n.code,{children:"Code"})," to dummy object that is a single ",(0,o.jsx)(n.strong,{children:"word"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["In this case, We select ",(0,o.jsx)(n.em,{children:"Case 2"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Replace ",(0,o.jsx)(n.code,{children:"Code"})," to dummy object that is a single ",(0,o.jsx)(n.strong,{children:"word"})," Using ",(0,o.jsx)(n.a,{href:"https://github.com/syntax-tree/unist-util-map",title:"unist-util-map",children:"unist-util-map"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'// Helper for creating new AST using map function\n// https://github.com/azu/unist-util-map\n// if you want to filter, use https://github.com/eush77/unist-util-filter\nimport map from "unist-util-map";\n// Default options\nconst defaultOptions = {\n    // max count of words >\n    max: 50\n};\n/**\n * @param {TextLintRuleContext} context\n * @param {Object} options\n */\nexport default function (context, options = {}) {\n    const { Syntax, getSource, RuleError, report } = context;\n    const maxWordCount = options.max ? options.max : defaultOptions.max;\n    return {\n        [Syntax.Paragraph](node) {\n            // replace code with dummy code\n            // if you want to filter(remove) code, use https://github.com/eush77/unist-util-filter\n            const filteredNode = map(node, (node) => {\n                if (node.type === Syntax.Code) {\n                    // only change `value` to dummy\n                    return Object.assign({}, node, {\n                        value: "code"\n                    });\n                }\n                return node;\n            });\n        }\n    };\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"3-get-text-of-a-paragraph",children:"3. Get text of a Paragraph"}),"\n",(0,o.jsxs)(n.p,{children:["We can get text from a node with ",(0,o.jsx)(n.strong,{children:"Source Map"})," using ",(0,o.jsx)(n.a,{href:"https://www.npmjs.com/package/textlint-util-to-string",children:"textlint-util-to-string"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Why does we use ",(0,o.jsx)(n.a,{href:"https://www.npmjs.com/package/textlint-util-to-string",children:"textlint-util-to-string"}),"?"]}),"\n",(0,o.jsxs)(n.p,{children:["Because, we report error via ",(0,o.jsx)(n.code,{children:"context.report"})," with original position of the text."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'// Helper for creating new AST using map function\n// https://github.com/azu/unist-util-map\n// if you want to filter, use https://github.com/eush77/unist-util-filter\nimport map from "unist-util-map";\n// Helper for converting plain text from Syntax-ed text(markdown AST\n// https://github.com/azu/textlint-util-to-string\nimport StringSource from "textlint-util-to-string";\n// Default options\nconst defaultOptions = {\n    // max count of words >\n    max: 50\n};\n/**\n * @param {TextLintRuleContext} context\n * @param {Object} options\n */\nexport default function (context, options = {}) {\n    const { Syntax, getSource, RuleError, report } = context;\n    const maxWordCount = options.max ? options.max : defaultOptions.max;\n    return {\n        [Syntax.Paragraph](node) {\n            // replace code with dummy code\n            // if you want to filter(remove) code, use https://github.com/eush77/unist-util-filter\n            const filteredNode = map(node, (node) => {\n                if (node.type === Syntax.Code) {\n                    // only change `value` to dummy\n                    return Object.assign({}, node, {\n                        value: "code"\n                    });\n                }\n                return node;\n            });\n            // create StringSource\n            const source = new StringSource(filteredNode);\n            // text in a paragraph\n            const text = source.toString();\n        }\n    };\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"4-create-sentences-from-paragraph",children:"4. Create Sentences from Paragraph"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://www.npmjs.com/package/sentence-splitter",children:"sentence-splitter"})," split text to ",(0,o.jsx)(n.code,{children:"Sentence"}),"s."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'// Helper for creating new AST using map function\n// https://github.com/azu/unist-util-map\n// if you want to filter, use https://github.com/eush77/unist-util-filter\nimport map from "unist-util-map";\n// Helper for converting plain text from Syntax-ed text(markdown AST\n// https://github.com/azu/textlint-util-to-string\nimport StringSource from "textlint-util-to-string";\n// Helper for splitting text to sentences\n// https://github.com/azu/sentence-splitter\nimport { split as splitSentence, Syntax as SplitterSyntax } from "sentence-splitter";\n// Default options\nconst defaultOptions = {\n    // max count of words >\n    max: 50\n};\n/**\n * @param {TextLintRuleContext} context\n * @param {Object} options\n */\nexport default function (context, options = {}) {\n    const { Syntax, getSource, RuleError, report } = context;\n    const maxWordCount = options.max ? options.max : defaultOptions.max;\n    return {\n        [Syntax.Paragraph](node) {\n            // replace code with dummy code\n            // if you want to filter(remove) code, use https://github.com/eush77/unist-util-filter\n            const filteredNode = map(node, (node) => {\n                if (node.type === Syntax.Code) {\n                    // only change `value` to dummy\n                    return Object.assign({}, node, {\n                        value: "code"\n                    });\n                }\n                return node;\n            });\n            const source = new StringSource(filteredNode);\n            // text in a paragraph\n            const text = source.toString();\n            // get sentences from Paragraph\n            const sentences = splitSentence(text).filter((node) => {\n                // ignore break line\n                return node.type === SplitterSyntax.Sentence;\n            });\n            // text in a sentence\n            sentences.forEach((sentence) => {\n                /* sentence object is a node\n                {\n                    type: "Sentence",\n                    raw: text,\n                    value: text,\n                    loc: loc,\n                    range: range\n                };\n                 */\n                const sentenceText = sentence.value;\n            });\n        }\n    };\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"4-get-words-in-a-sentence",children:"4. Get words in a sentence"}),"\n",(0,o.jsxs)(n.p,{children:["Split a ",(0,o.jsx)(n.strong,{children:"Sentence"})," to ",(0,o.jsx)(n.strong,{children:"Word"}),"s using ",(0,o.jsx)(n.a,{href:"https://www.npmjs.com/package/split-string-words",children:"split-string-words"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'// Helper for creating new AST using map function\n// https://github.com/azu/unist-util-map\n// if you want to filter, use https://github.com/eush77/unist-util-filter\nimport map from "unist-util-map";\n// Helper for converting plain text from Syntax-ed text(markdown AST\n// https://github.com/azu/textlint-util-to-string\nimport StringSource from "textlint-util-to-string";\n// Helper for splitting text to sentences\n// https://github.com/azu/sentence-splitter\nimport { split as splitSentence, Syntax as SplitterSyntax } from "sentence-splitter";\n// Helper for splitting text to words\n// https://github.com/timjrobinson/split-string-words\nimport splitWord from "split-string-words";\n// Default options\nconst defaultOptions = {\n    // max count of words >\n    max: 50\n};\n/**\n * @param {TextLintRuleContext} context\n * @param {Object} options\n */\nexport default function (context, options = {}) {\n    const { Syntax, getSource, RuleError, report } = context;\n    const maxWordCount = options.max ? options.max : defaultOptions.max;\n    return {\n        [Syntax.Paragraph](node) {\n            // replace code with dummy code\n            // if you want to filter(remove) code, use https://github.com/eush77/unist-util-filter\n            const filteredNode = map(node, (node) => {\n                if (node.type === Syntax.Code) {\n                    // only change `value` to dummy\n                    return Object.assign({}, node, {\n                        value: "code"\n                    });\n                }\n                return node;\n            });\n            const source = new StringSource(filteredNode);\n            // text in a paragraph\n            const text = source.toString();\n            // get sentences from Paragraph\n            const sentences = splitSentence(text).filter((node) => {\n                // ignore break line\n                return node.type === SplitterSyntax.Sentence;\n            });\n            // text in a sentence\n            sentences.forEach((sentence) => {\n                /* sentence object is a node\n                {\n                    type: "Sentence",\n                    raw: text,\n                    value: text,\n                    loc: loc,\n                    range: range\n                };\n                 */\n                const sentenceText = sentence.value;\n                // words in a sentence\n                const words = splitWord(sentenceText);\n                // over count of word, then report error\n                if (words.length > maxWordCount) {\n                    // get original index value of sentence.loc.start\n                    const originalIndex = source.originalIndexFromPosition(sentence.loc.start);\n                    const ruleError = new RuleError(`Exceeds the maximum word count of ${maxWordCount}.`, {\n                        index: originalIndex\n                    });\n                    report(node, ruleError);\n                }\n            });\n        }\n    };\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"If the count of word is over max, report this as RuleError."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"// over count of word, then report error\nif (words.length > maxWordCount) {\n    // get original index value of sentence.loc.start\n    const originalIndex = source.originalIndexFromPosition(sentence.loc.start);\n    const ruleError = new RuleError(`Exceeds the maximum word count of ${maxWordCount}.`, {\n        index: originalIndex\n    });\n    report(node, ruleError);\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You can get original index from position of ",(0,o.jsx)(n.strong,{children:"Sentence"})," node."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const originalIndex = source.originalIndexFromPosition(sentence.loc.start);\n"})}),"\n",(0,o.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,o.jsxs)(n.p,{children:["Test the rule with ",(0,o.jsx)(n.a,{href:"https://www.npmjs.com/package/textlint-tester",title:"textlint-tester",children:"textlint-tester"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'const TextLintTester = require("textlint-tester");\nconst tester = new TextLintTester();\n// rule\nimport rule from "../src/textlint-rule-en-max-word-count";\n// ruleName, rule, { valid, invalid }\ntester.run("max-word-count", rule, {\n    valid: [\n        // no match\n        {\n            text: "This is pen.",\n            options: {\n                max: 3\n            }\n        },\n        // replace Code block to a word\n        {\n            text: "This is `code is a word`.",\n            options: {\n                max: 3\n            }\n        }\n    ],\n    invalid: [\n        // single match\n        {\n            text: "This is a pen.",\n            options: {\n                max: 3\n            },\n            errors: [\n                {\n                    message: "Exceeds the maximum word count of 3.",\n                    line: 1,\n                    column: 1\n                }\n            ]\n        },\n        // multiple match in multiple lines\n        {\n            text: `This is a pen.\n            \nThis is not a pen.`,\n            options: {\n                max: 3\n            },\n            errors: [\n                {\n                    message: "Exceeds the maximum word count of 3.",\n                    line: 1,\n                    column: 1\n                },\n                {\n                    message: "Exceeds the maximum word count of 3.",\n                    line: 3,\n                    column: 1\n                }\n            ]\n        },\n        // multiple hit items in a line\n        {\n            text: "This is a pen.This is not a pen.",\n            options: {\n                max: 3\n            },\n            errors: [\n                {\n                    message: "Exceeds the maximum word count of 3.",\n                    line: 1,\n                    column: 1\n                },\n                {\n                    message: "Exceeds the maximum word count of 3.",\n                    line: 1,\n                    column: 15\n                }\n            ]\n        },\n        // It is a single sentence\n        {\n            text: "This is a pen This is not a pen.",\n            options: {\n                max: 3\n            },\n            errors: [\n                {\n                    message: "Exceeds the maximum word count of 3.",\n                    line: 1,\n                    column: 1\n                }\n            ]\n        }\n    ]\n});\n'})}),"\n",(0,o.jsx)(n.h2,{id:"complete",children:"Complete!"}),"\n",(0,o.jsxs)(n.p,{children:["See completed source code in ",(0,o.jsx)(n.a,{href:"https://github.com/azu/textlint-rule-en-max-word-count",title:"textlint-rule-en-max-word-count",children:"textlint-rule-en-max-word-count"})]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);