"use strict";(self.webpackChunktextlint_website=self.webpackChunktextlint_website||[]).push([[5092],{4318:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var i=t(4700);const r={},s=i.createContext(r);function l(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(s.Provider,{value:n},e.children)}},6380:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>x,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"migration-to-v15","title":"Migration Guide to textlint v15","description":"textlint v15 introduces breaking changes by removing all deprecated legacy APIs. This guide will help you migrate from the old APIs to the new ones.","source":"@site/../docs/migration-to-v15.md","sourceDirName":".","slug":"/migration-to-v15","permalink":"/textlint/pr-preview/pr-1624/docs/migration-to-v15","draft":false,"unlisted":false,"editUrl":"https://github.com/textlint/textlint/edit/master/docs/../docs/migration-to-v15.md","tags":[],"version":"current","lastUpdatedBy":"github-actions[bot]","lastUpdatedAt":1751553854000,"frontMatter":{}}');var r=t(7968),s=t(4318);const l={},o="Migration Guide to textlint v15",c={},d=[{value:"Overview of Changes",id:"overview-of-changes",level:2},{value:"Benefits of the New API",id:"benefits-of-the-new-api",level:2},{value:"Migration Examples",id:"migration-examples",level:2},{value:"1. From <code>TextLintEngine</code> to <code>createLinter</code>",id:"1-from-textlintengine-to-createlinter",level:3},{value:"2. From <code>TextFixEngine</code> to <code>createLinter</code>",id:"2-from-textfixengine-to-createlinter",level:3},{value:"3. From <code>TextLintCore</code> to <code>createLinter</code>",id:"3-from-textlintcore-to-createlinter",level:3},{value:"4. From singleton <code>textlint</code> to <code>createLinter</code>",id:"4-from-singleton-textlint-to-createlinter",level:3},{value:"Deprecated APIs Reference",id:"deprecated-apis-reference",level:2},{value:"TextLintEngine (Deprecated)",id:"textlintengine-deprecated",level:3},{value:"Constructor Options",id:"constructor-options",level:4},{value:"Methods",id:"methods",level:4},{value:"TextFixEngine (Deprecated)",id:"textfixengine-deprecated",level:3},{value:"Constructor Options",id:"constructor-options-1",level:4},{value:"Methods",id:"methods-1",level:4},{value:"TextLintCore (Deprecated)",id:"textlintcore-deprecated",level:3},{value:"Constructor",id:"constructor",level:4},{value:"Methods",id:"methods-2",level:4},{value:"Singleton textlint (Deprecated)",id:"singleton-textlint-deprecated",level:3},{value:"Detailed Examples from Previous Documentation",id:"detailed-examples-from-previous-documentation",level:2},{value:"TextLintEngine Example (Removed in v15)",id:"textlintengine-example-removed-in-v15",level:3},{value:"executeOnText Migration Example",id:"executeontext-migration-example",level:3},{value:"Advanced Migration Scenarios",id:"advanced-migration-scenarios",level:2},{value:"Mixing Configuration File and Custom Rules",id:"mixing-configuration-file-and-custom-rules",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Method Mapping Reference",id:"method-mapping-reference",level:2},{value:"Common Pitfalls and Solutions",id:"common-pitfalls-and-solutions",level:2},{value:"1. File Extension Detection",id:"1-file-extension-detection",level:3},{value:"2. Module Loading",id:"2-module-loading",level:3},{value:"3. Formatter Usage",id:"3-formatter-usage",level:3},{value:"4. Configuration Loading",id:"4-configuration-loading",level:3},{value:"Testing Your Migration",id:"testing-your-migration",level:2},{value:"Documentation Updates",id:"documentation-updates",level:2},{value:"Support and Resources",id:"support-and-resources",level:2},{value:"Summary",id:"summary",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"migration-guide-to-textlint-v15",children:"Migration Guide to textlint v15"})}),"\n",(0,r.jsxs)(n.p,{children:["textlint v15 introduces ",(0,r.jsx)(n.strong,{children:"breaking changes"})," by removing all deprecated legacy APIs. This guide will help you migrate from the old APIs to the new ones."]}),"\n",(0,r.jsx)(n.h2,{id:"overview-of-changes",children:"Overview of Changes"}),"\n",(0,r.jsx)(n.p,{children:"The following deprecated APIs have been completely removed:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"TextLintEngine"})," \u2192 Use ",(0,r.jsx)(n.code,{children:"createLinter()"})," instead"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"TextFixEngine"})," \u2192 Use ",(0,r.jsx)(n.code,{children:"createLinter()"})," instead"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"TextLintCore"})," \u2192 Use ",(0,r.jsx)(n.code,{children:"createLinter()"})," or ",(0,r.jsx)(n.code,{children:"@textlint/kernel"})," instead"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"textlint"})," (singleton instance) \u2192 Use ",(0,r.jsx)(n.code,{children:"createLinter()"})," instead"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"benefits-of-the-new-api",children:"Benefits of the New API"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Modern ESM Support"}),": Full support for both CommonJS and ES modules"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Better TypeScript Support"}),": Improved type definitions and inference"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cleaner Architecture"}),": Clear separation between configuration loading and linting"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"More Flexible"}),": Easier to customize and extend for different use cases"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Better Testing"}),": Each component can be tested independently"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"migration-examples",children:"Migration Examples"}),"\n",(0,r.jsxs)(n.h3,{id:"1-from-textlintengine-to-createlinter",children:["1. From ",(0,r.jsx)(n.code,{children:"TextLintEngine"})," to ",(0,r.jsx)(n.code,{children:"createLinter"})]}),"\n",(0,r.jsx)(n.p,{children:"The most common migration scenario."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Before (deprecated):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const { TextLintEngine } = require("textlint");\n\nconst engine = new TextLintEngine({\n    configFile: ".textlintrc.json"\n});\nconst results = await engine.executeOnFiles(["*.md"]);\nconst output = engine.formatResults(results);\nconsole.log(output);\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"After (new API):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'import { createLinter, loadTextlintrc, loadLinterFormatter } from "textlint";\n\nconst descriptor = await loadTextlintrc({\n    configFilePath: ".textlintrc.json"\n});\nconst linter = createLinter({ descriptor });\nconst results = await linter.lintFiles(["*.md"]);\nconst formatter = await loadLinterFormatter({ formatterName: "stylish" });\nconst output = formatter.format(results);\nconsole.log(output);\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"2-from-textfixengine-to-createlinter",children:["2. From ",(0,r.jsx)(n.code,{children:"TextFixEngine"})," to ",(0,r.jsx)(n.code,{children:"createLinter"})]}),"\n",(0,r.jsx)(n.p,{children:"For fixing text content."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Before (deprecated):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const { TextFixEngine } = require("textlint");\n\nconst engine = new TextFixEngine();\nconst results = await engine.executeOnFiles(["*.md"]);\n// Results contain fixed content\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"After (new API):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'import { createLinter, loadTextlintrc } from "textlint";\n\nconst descriptor = await loadTextlintrc();\nconst linter = createLinter({ descriptor });\nconst results = await linter.fixFiles(["*.md"]);\n// Results contain fixed content\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"3-from-textlintcore-to-createlinter",children:["3. From ",(0,r.jsx)(n.code,{children:"TextLintCore"})," to ",(0,r.jsx)(n.code,{children:"createLinter"})]}),"\n",(0,r.jsx)(n.p,{children:"For programmatic usage with custom rules."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Before (deprecated):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const { TextLintCore } = require("textlint");\n\nconst textlint = new TextLintCore();\ntextlint.setupRules({\n    "rule-name": require("./my-rule")\n});\ntextlint.setupPlugins({\n    "@textlint/markdown": require("@textlint/textlint-plugin-markdown")\n});\nconst result = await textlint.lintText("Hello world", "test.md");\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"After (new API):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'import { createLinter } from "textlint";\nimport { TextlintKernelDescriptor } from "@textlint/kernel";\nimport { moduleInterop } from "@textlint/module-interop";\n\nconst descriptor = new TextlintKernelDescriptor({\n    rules: [\n        {\n            ruleId: "rule-name",\n            rule: moduleInterop((await import("./my-rule")).default)\n        }\n    ],\n    plugins: [\n        {\n            pluginId: "@textlint/markdown",\n            plugin: moduleInterop((await import("@textlint/textlint-plugin-markdown")).default)\n        }\n    ]\n});\nconst linter = createLinter({ descriptor });\nconst result = await linter.lintText("Hello world", "test.md");\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"4-from-singleton-textlint-to-createlinter",children:["4. From singleton ",(0,r.jsx)(n.code,{children:"textlint"})," to ",(0,r.jsx)(n.code,{children:"createLinter"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Before (deprecated):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const { textlint } = require("textlint");\n\ntextlint.setupRules({ "rule-name": ruleModule });\nconst result = await textlint.lintText("text", "file.md");\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"After (new API):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'import { createLinter } from "textlint";\nimport { TextlintKernelDescriptor } from "@textlint/kernel";\n\nconst descriptor = new TextlintKernelDescriptor({\n    rules: [{ ruleId: "rule-name", rule: ruleModule }]\n});\nconst linter = createLinter({ descriptor });\nconst result = await linter.lintText("text", "file.md");\n'})}),"\n",(0,r.jsx)(n.h2,{id:"deprecated-apis-reference",children:"Deprecated APIs Reference"}),"\n",(0,r.jsx)(n.p,{children:"This section provides detailed documentation about the deprecated APIs that have been removed in v15. This information is preserved here for migration purposes."}),"\n",(0,r.jsx)(n.h3,{id:"textlintengine-deprecated",children:"TextLintEngine (Deprecated)"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"TextLintEngine"})," was the primary interface for linting files in textlint v14 and earlier."]}),"\n",(0,r.jsx)(n.h4,{id:"constructor-options",children:"Constructor Options"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const engine = new TextLintEngine(options);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Options:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"configFile"}),": Path to configuration file (",(0,r.jsx)(n.code,{children:".textlintrc"}),", ",(0,r.jsx)(n.code,{children:".textlintrc.js"}),", etc.)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"rulePaths"}),": Array of directories to load rules from"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"formatterName"}),": Name of formatter to use for output"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"plugins"}),": Array of plugin names to load"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"rules"}),": Object mapping rule names to rule modules"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"presets"}),": Array of preset names to load"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"extensions"}),": Array of file extensions to process"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cache"}),": Enable/disable caching"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cacheLocation"}),": Path to cache file"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"executeOnFiles(patterns)"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const results = await engine.executeOnFiles(["*.md", "*.txt"]);\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"patterns"}),": Array of glob patterns or file paths"]}),"\n",(0,r.jsx)(n.li,{children:"Returns: Array of lint results"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"executeOnText(text, filePath)"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const results = await engine.executeOnText("# Hello", "README.md");\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"text"}),": Text content to lint"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"filePath"}),": File path for context"]}),"\n",(0,r.jsx)(n.li,{children:"Returns: Array of lint results"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"formatResults(results, formatterName?)"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const output = engine.formatResults(results, "stylish");\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"results"}),": Array of lint results"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"formatterName"}),": Optional formatter name (defaults to constructor option)"]}),"\n",(0,r.jsx)(n.li,{children:"Returns: Formatted string output"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"textfixengine-deprecated",children:"TextFixEngine (Deprecated)"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"TextFixEngine"})," was used for auto-fixing lint errors."]}),"\n",(0,r.jsx)(n.h4,{id:"constructor-options-1",children:"Constructor Options"}),"\n",(0,r.jsxs)(n.p,{children:["Same as ",(0,r.jsx)(n.code,{children:"TextLintEngine"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"methods-1",children:"Methods"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"executeOnFiles(patterns)"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const results = await fixEngine.executeOnFiles(["*.md"]);\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Automatically fixes issues and returns fix results"}),"\n",(0,r.jsxs)(n.li,{children:["Returns: Array of fix results with ",(0,r.jsx)(n.code,{children:"output"})," property"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"executeOnText(text, filePath)"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const results = await fixEngine.executeOnText("# Hello", "README.md");\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Returns: Array of fix results"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"textlintcore-deprecated",children:"TextLintCore (Deprecated)"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"TextLintCore"})," was the low-level API for custom integrations."]}),"\n",(0,r.jsx)(n.h4,{id:"constructor",children:"Constructor"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const textlint = new TextLintCore(config?);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"methods-2",children:"Methods"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"setupRules(rules, rulesBaseConfig?)"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'textlint.setupRules({\n    "rule-name": require("textlint-rule-example")\n}, {\n    "rule-name": { severity: "error" }\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"setupFilterRules(rules, rulesConfig?)"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'textlint.setupFilterRules({\n    "filter-rule": require("textlint-filter-rule-example")\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"setupPlugins(plugins, pluginsConfig?)"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'textlint.setupPlugins({\n    "plugin-name": require("textlint-plugin-example")\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"setupPresets(presets, presetsConfig?)"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'textlint.setupPresets({\n    "preset-name": require("textlint-rule-preset-example")\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"lintText(text, filePath)"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const result = await textlint.lintText("# Hello", "README.md");\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"lintFile(filePath)"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const result = await textlint.lintFile("README.md");\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"fixText(text, filePath)"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const result = await textlint.fixText("# Hello", "README.md");\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"fixFile(filePath)"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const result = await textlint.fixFile("README.md");\n'})}),"\n",(0,r.jsx)(n.h3,{id:"singleton-textlint-deprecated",children:"Singleton textlint (Deprecated)"}),"\n",(0,r.jsxs)(n.p,{children:["A pre-configured instance of ",(0,r.jsx)(n.code,{children:"TextLintCore"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const { textlint } = require("textlint");\n\ntextlint.setupRules({ "rule-name": ruleModule });\nconst result = await textlint.lintText("text", "file.md");\n'})}),"\n",(0,r.jsx)(n.h2,{id:"detailed-examples-from-previous-documentation",children:"Detailed Examples from Previous Documentation"}),"\n",(0,r.jsx)(n.h3,{id:"textlintengine-example-removed-in-v15",children:"TextLintEngine Example (Removed in v15)"}),"\n",(0,r.jsxs)(n.p,{children:["This example shows how ",(0,r.jsx)(n.code,{children:"TextLintEngine"})," was used before v15:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'// DEPRECATED - This no longer works in v15\nconst TextLintEngine = require("textlint").TextLintEngine;\nconst path = require("path");\n\nfunction lintFile(filePath) {\n    const options = {\n        // load rules from [../rules]\n        rules: ["no-todo"],\n        formatterName: "pretty-error"\n    };\n    const engine = new TextLintEngine(options);\n    const filePathList = [path.resolve(process.cwd(), filePath)];\n    return engine.executeOnFiles(filePathList).then(function(results) {\n        if (engine.isErrorResults(results)) {\n            const output = engine.formatResults(results);\n            console.log(output);\n        } else {\n            console.log("All Passed!");\n        }\n    });\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Equivalent v15+ code:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'import { createLinter, loadTextlintrc, loadLinterFormatter } from "textlint";\nimport path from "node:path";\n\nasync function lintFile(filePath) {\n    const descriptor = await loadTextlintrc({\n        rules: ["no-todo"]\n    });\n    const linter = createLinter({ descriptor });\n    const filePathList = [path.resolve(process.cwd(), filePath)];\n    const results = await linter.lintFiles(filePathList);\n    \n    const hasErrors = results.some(result => result.messages.length > 0);\n    if (hasErrors) {\n        const formatter = await loadLinterFormatter({ formatterName: "pretty-error" });\n        const output = formatter.format(results);\n        console.log(output);\n    } else {\n        console.log("All Passed!");\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"executeontext-migration-example",children:"executeOnText Migration Example"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Old API:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const TextLintEngine = require("textlint").TextLintEngine;\nconst engine = new TextLintEngine();\nconst ruleText = "This is my text.";\nconst results = await engine.executeOnText(ruleText);\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"New API:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'import { createLinter, loadTextlintrc } from "textlint";\n\nconst descriptor = await loadTextlintrc();\nconst linter = createLinter({ descriptor });\nconst ruleText = "This is my text.";\n// Note: dummy filename needed to determine content type\nconst results = await linter.lintText(ruleText, \'document.txt\');\n'})}),"\n",(0,r.jsx)(n.h2,{id:"advanced-migration-scenarios",children:"Advanced Migration Scenarios"}),"\n",(0,r.jsx)(n.h3,{id:"mixing-configuration-file-and-custom-rules",children:"Mixing Configuration File and Custom Rules"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Before (deprecated):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const { TextLintCore } = require("textlint");\nconst { Config } = require("textlint/lib/config/config");\n\nconst config = new Config({ configFile: ".textlintrc.json" });\nconst textlint = new TextLintCore(config);\ntextlint.setupRules({ "custom-rule": customRule });\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"After (new API):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'import { createLinter, loadTextlintrc } from "textlint";\nimport { TextlintKernelDescriptor } from "@textlint/kernel";\n\nconst textlintrcDescriptor = await loadTextlintrc({\n    configFilePath: ".textlintrc.json"\n});\nconst customDescriptor = new TextlintKernelDescriptor({\n    rules: [{ ruleId: "custom-rule", rule: customRule }]\n});\nconst linter = createLinter({\n    descriptor: customDescriptor.concat(textlintrcDescriptor)\n});\n'})}),"\n",(0,r.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Before (deprecated):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const { TextLintEngine } = require("textlint");\n\nconst engine = new TextLintEngine();\ntry {\n    const results = await engine.executeOnFiles(["*.md"]);\n    if (engine.isErrorResults(results)) {\n        // Handle errors\n    }\n} catch (error) {\n    // Handle exceptions\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"After (new API):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'import { createLinter, loadTextlintrc } from "textlint";\n\ntry {\n    const descriptor = await loadTextlintrc();\n    const linter = createLinter({ descriptor });\n    const results = await linter.lintFiles(["*.md"]);\n    \n    const hasErrors = results.some(result => \n        result.messages.some(message => message.severity === 2)\n    );\n    if (hasErrors) {\n        // Handle errors\n    }\n} catch (error) {\n    // Handle exceptions\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"method-mapping-reference",children:"Method Mapping Reference"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Deprecated API"}),(0,r.jsx)(n.th,{children:"New API"}),(0,r.jsx)(n.th,{children:"Notes"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"new TextLintEngine()"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"createLinter()"})}),(0,r.jsxs)(n.td,{children:["Requires descriptor from ",(0,r.jsx)(n.code,{children:"loadTextlintrc()"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"new TextFixEngine()"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"createLinter()"})}),(0,r.jsxs)(n.td,{children:["Use ",(0,r.jsx)(n.code,{children:"fixFiles()"})," or ",(0,r.jsx)(n.code,{children:"fixText()"})," methods"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"new TextLintCore()"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"createLinter()"})," or ",(0,r.jsx)(n.code,{children:"@textlint/kernel"})]}),(0,r.jsx)(n.td,{children:"For low-level usage"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"engine.executeOnFiles()"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"linter.lintFiles()"})}),(0,r.jsx)(n.td,{children:"Similar functionality"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"engine.executeOnText()"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"linter.lintText()"})}),(0,r.jsx)(n.td,{children:"Requires file extension hint"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"engine.formatResults()"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"loadLinterFormatter()"})," then ",(0,r.jsx)(n.code,{children:"format()"})]}),(0,r.jsx)(n.td,{children:"Separate formatter loading"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"textlint.setupRules()"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"TextlintKernelDescriptor"})}),(0,r.jsx)(n.td,{children:"Use descriptor pattern"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"textlint.setupPlugins()"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"TextlintKernelDescriptor"})}),(0,r.jsx)(n.td,{children:"Use descriptor pattern"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"common-pitfalls-and-solutions",children:"Common Pitfalls and Solutions"}),"\n",(0,r.jsx)(n.h3,{id:"1-file-extension-detection",children:"1. File Extension Detection"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Issue"}),": ",(0,r.jsx)(n.code,{children:"lintText()"})," requires a file extension hint."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Always provide a meaningful file extension:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Bad\nawait linter.lintText("# Title", "unknown");\n\n// Good  \nawait linter.lintText("# Title", "document.md");\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-module-loading",children:"2. Module Loading"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Issue"}),": Direct ",(0,r.jsx)(n.code,{children:"require()"})," calls may not work with ES modules."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Use ",(0,r.jsx)(n.code,{children:"moduleInterop()"})," helper:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'import { moduleInterop } from "@textlint/module-interop";\n\nconst rule = moduleInterop((await import("./my-rule")).default);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"3-formatter-usage",children:"3. Formatter Usage"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Issue"}),": Formatters are no longer methods on engine instances."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Load formatters separately:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'import { loadLinterFormatter } from "textlint";\n\nconst formatter = await loadLinterFormatter({ formatterName: "stylish" });\nconst output = formatter.format(results);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"4-configuration-loading",children:"4. Configuration Loading"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Issue"}),": Configuration is no longer automatically loaded."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Explicitly load configuration:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'import { loadTextlintrc } from "textlint";\n\nconst descriptor = await loadTextlintrc(); // Auto-detects config\n// OR\nconst descriptor = await loadTextlintrc({ \n    configFilePath: ".textlintrc.json" \n});\n'})}),"\n",(0,r.jsx)(n.h2,{id:"testing-your-migration",children:"Testing Your Migration"}),"\n",(0,r.jsx)(n.p,{children:"After migrating, ensure your code works by:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Running existing tests"})," - They should pass with the new API"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Checking TypeScript compilation"})," - New APIs have better type support"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Testing with both CommonJS and ESM"})," - New APIs support both"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Verifying output format"})," - Results should be identical"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"documentation-updates",children:"Documentation Updates"}),"\n",(0,r.jsx)(n.p,{children:"As part of the v15 release, all documentation has been updated to remove references to the deprecated APIs:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/textlint/pr-preview/pr-1624/docs/use-as-modules",children:(0,r.jsx)(n.code,{children:"docs/use-as-modules.md"})})," - Updated to focus on the new APIs only"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../examples/use-as-module/",children:(0,r.jsx)(n.code,{children:"examples/use-as-module/"})})," - Examples using the new APIs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../examples/use-as-ts-module/",children:(0,r.jsx)(n.code,{children:"examples/use-as-ts-module/"})})," - TypeScript examples"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"All deprecated API documentation has been consolidated into this migration guide to preserve the information for users who need to migrate their code."}),"\n",(0,r.jsx)(n.h2,{id:"support-and-resources",children:"Support and Resources"}),"\n",(0,r.jsx)(n.p,{children:"If you encounter issues during migration:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Check the examples"}),": The ",(0,r.jsx)(n.a,{href:"../examples/",children:(0,r.jsx)(n.code,{children:"examples/"})})," directory contains working examples using the new APIs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Read the API documentation"}),": ",(0,r.jsx)(n.a,{href:"/textlint/pr-preview/pr-1624/docs/use-as-modules",children:(0,r.jsx)(n.code,{children:"docs/use-as-modules.md"})})," provides comprehensive API documentation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Open an issue"}),": If you find migration issues, please ",(0,r.jsx)(n.a,{href:"https://github.com/textlint/textlint/issues",children:"open an issue on GitHub"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsx)(n.p,{children:"textlint v15 represents a significant modernization of the API while maintaining full linting functionality. The new APIs provide:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Better TypeScript support"}),"\n",(0,r.jsx)(n.li,{children:"Modern ES module compatibility"}),"\n",(0,r.jsx)(n.li,{children:"Cleaner separation of concerns"}),"\n",(0,r.jsx)(n.li,{children:"Reduced bundle size"}),"\n",(0,r.jsx)(n.li,{children:"Future-proof architecture"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"While the migration requires code changes, the new APIs offer a much better developer experience and set the foundation for future textlint development."})]})}function x(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);