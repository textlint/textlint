"use strict";(self.webpackChunktextlint_website=self.webpackChunktextlint_website||[]).push([[9644],{6719:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var i=n(3917);const r={},l=i.createContext(r);function s(e){const t=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(l.Provider,{value:t},e.children)}},6753:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"cli","title":"Command Line Interface","description":"The textlint Command Line Interface (CLI) is a tool for linting text from terminal.","source":"@site/../docs/cli.md","sourceDirName":".","slug":"/cli","permalink":"/textlint/pr-preview/pr-1539/docs/cli","draft":false,"unlisted":false,"editUrl":"https://github.com/textlint/textlint/edit/master/docs/../docs/cli.md","tags":[],"version":"current","lastUpdatedBy":"renovate[bot]","lastUpdatedAt":1754915658000,"frontMatter":{"id":"cli","title":"Command Line Interface"},"sidebar":"docs","previous":{"title":"Getting Started with textlint","permalink":"/textlint/pr-preview/pr-1539/docs/getting-started"},"next":{"title":"Configuring textlint","permalink":"/textlint/pr-preview/pr-1539/docs/configuring"}}');var r=n(1273),l=n(6719);const s={id:"cli",title:"Command Line Interface"},o="Command Line Interface",a={},c=[{value:"Run the CLI",id:"run-the-cli",level:2},{value:"Options",id:"options",level:2},{value:"Pipe to textlint",id:"pipe-to-textlint",level:2},{value:"Cache",id:"cache",level:2},{value:"Exit Code",id:"exit-code",level:2},{value:"File Search Error Details",id:"file-search-error-details",level:3}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"command-line-interface",children:"Command Line Interface"})}),"\n",(0,r.jsx)(t.p,{children:"The textlint Command Line Interface (CLI) is a tool for linting text from terminal."}),"\n",(0,r.jsx)(t.h2,{id:"run-the-cli",children:"Run the CLI"}),"\n",(0,r.jsxs)(t.p,{children:["textlint requires Node.js for running. Follow the instruction in the ",(0,r.jsx)(t.a,{href:"/textlint/pr-preview/pr-1539/docs/getting-started",children:"Getting Started with textlint"})," to run the CLI."]}),"\n",(0,r.jsxs)(t.p,{children:["Most users use ",(0,r.jsx)(t.a,{href:"https://docs.npmjs.com/cli/commands/npx",children:"npx"})," to run ",(0,r.jsx)(t.code,{children:"textlint"})," command from terminal."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sh",children:"$ npx textlint README.md\n"})}),"\n",(0,r.jsx)(t.p,{children:"textlint support glob pattern and directory as path."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sh",children:'# Should wrap the glob pattern with double quotes\n$ npx textlint "docs/**/*.md"\n# Run for directory\n$ npx textlint docs/\n'})}),"\n",(0,r.jsx)(t.h2,{id:"options",children:"Options"}),"\n",(0,r.jsxs)(t.p,{children:["You can view all the CLI options by running ",(0,r.jsx)(t.code,{children:"textlint --help"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sh",children:"$ textlint [options] file.md [file|dir|glob*]\n\nOptions:\n  -h, --help                  Show help.\n  -c, --config path::String   Use configuration from this file or sharable config.\n  --ignore-path path::String  Specify path to a file containing patterns that describes files to ignore. - default: .textlintignore\n  --init                      Create the config file if not existed. - default: false\n  --fix                       Automatically fix problems\n  --dry-run                   Enable dry-run mode for --fix. Only show result, don't change the file.\n  --debug                     Outputs debugging information\n  --print-config              Print the config object to stdout\n  -v, --version               Outputs the version number.\n\nUsing stdin:\n  --stdin                     Lint text provided on <STDIN>. - default: false\n  --stdin-filename String     Specify filename to process STDIN as\n\nOutput:\n  -o, --output-file path::String  Enable report to be written to a file.\n  -f, --format String         Use a specific output format.\n\n                              Available formatter          : checkstyle, compact, jslint-xml, json, junit, pretty-error, stylish, table, tap, unix\n\n                              Available formatter for --fix: compats, diff, fixed-result, json, stylish - default: stylish\n  --no-color                  Disable color in piped output.\n  --quiet                     Report errors only. - default: false\n\nSpecifying rules and plugins:\n  --no-textlintrc             Disable .textlintrc\n  --plugin [String]           Set plugin package name\n  --rule [String]             Set rule package name\n  --preset [String]           Set preset package name and load rules from preset package.\n  --rulesdir [path::String]   Use additional rules from this directory\n\nCaching:\n  --cache                     Only check changed files - default: false\n  --cache-location path::String  Path to the cache file or directory - default: .textlintcache\n\nExperimental:\n  --experimental              Enable experimental flag.Some feature use on experimental.\n  --rules-base-directory path::String  Set module base directory. textlint load modules(rules/presets/plugins) from the base directory.\n  --mcp                       Start textlint as the Model Context Protocol (MCP) server.\n"})}),"\n",(0,r.jsx)(t.h2,{id:"pipe-to-textlint",children:"Pipe to textlint"}),"\n",(0,r.jsx)(t.p,{children:"textlint supports stdin from other commands via pipe."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sh",children:'$ cat README.md | npx textlint --stdin --stdin-filename "README.md"\n'})}),"\n",(0,r.jsxs)(t.p,{children:["You can get ",(0,r.jsx)(t.code,{children:"--fix"})," result via ",(0,r.jsx)(t.code,{children:"--format=fixed-result"})," formatter."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sh",children:"$ cat README.md | npx textlint --stdin --stdin-filename README.md --fix --format fixed-result --output-file NEW.md\n"})}),"\n",(0,r.jsx)(t.p,{children:"Note:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"--stdin-filename"})," is required when using ",(0,r.jsx)(t.code,{children:"--stdin"})," for recognizing the file type."]}),"\n",(0,r.jsxs)(t.li,{children:["Almost formatter output lint message, but ",(0,r.jsx)(t.code,{children:"fixed-result"})," formatter output ",(0,r.jsx)(t.code,{children:"--fix"})," result text."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"cache",children:"Cache"}),"\n",(0,r.jsxs)(t.p,{children:["textlint supports caching for performance.\nThe cache is disabled by default.\nYou can enable it with the ",(0,r.jsx)(t.code,{children:"--cache"})," option."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"$ textlint --cache README.md\n"})}),"\n",(0,r.jsxs)(t.p,{children:["If you want to clear the cache, you can use the ",(0,r.jsx)(t.code,{children:"--no-cache"})," option or just remove ",(0,r.jsx)(t.code,{children:"--cache"})," option."]}),"\n",(0,r.jsx)(t.h2,{id:"exit-code",children:"Exit Code"}),"\n",(0,r.jsx)(t.p,{children:"\ud83d\udcdd This status is defined in textlint v13.0.0 or later.\n\ud83d\ude80 File search error handling improved in textlint v15 or later."}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"0"}),": No Error"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Not found lint error"}),"\n",(0,r.jsx)(t.li,{children:"--fix: found errors but fix all errors, so exit with 0"}),"\n",(0,r.jsx)(t.li,{children:"--output-file: Found lint error but --output-file is specified"}),"\n",(0,r.jsx)(t.li,{children:"--dry-run: Found lint error but --dry-run is specified"}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"1"}),": Lint Error"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"found lint error"}),"\n",(0,r.jsx)(t.li,{children:"--fix: found errors and could not fix all errors, so exit with 1"}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"2"}),": Fatal Error"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Crash textlint process"}),"\n",(0,r.jsx)(t.li,{children:"Fail to load config/rule/plugin"}),"\n",(0,r.jsx)(t.li,{children:"File search errors"}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"file-search-error-details",children:"File Search Error Details"}),"\n",(0,r.jsx)(t.p,{children:"Starting with textlint v15+, file search related errors return exit status 2 to align with ESLint's behavior:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'# Non-existent file\n$ textlint nonexistent.md\n# Exit Status: 2\n\n# Non-existent glob pattern  \n$ textlint "nonexistent-dir/**/*.md"\n# Exit Status: 2\n\n# Mixed existing and non-existing files (only existing files are processed)\n$ textlint existing.md nonexistent.md\n# Exit Status: 0\n'})}),"\n",(0,r.jsx)(t.p,{children:"This change allows scripts to distinguish between lint errors (exit status 1) and file search errors (exit status 2)."}),"\n",(0,r.jsxs)(t.p,{children:["For comprehensive exit status behavior documentation, see ",(0,r.jsx)(t.a,{href:"/textlint/pr-preview/pr-1539/docs/faq/exit-status",children:"Exit Status FAQ"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);