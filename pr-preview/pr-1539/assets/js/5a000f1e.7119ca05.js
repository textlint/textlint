"use strict";(self.webpackChunktextlint_website=self.webpackChunktextlint_website||[]).push([[5937],{534:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"faq/exit-status","title":"Exit Status","description":"textlint returns different exit status codes based on the result of file processing. This document systematically explains the exit status behavior in various situations.","source":"@site/../docs/faq/exit-status.md","sourceDirName":"faq","slug":"/faq/exit-status","permalink":"/textlint/pr-preview/pr-1539/docs/faq/exit-status","draft":false,"unlisted":false,"editUrl":"https://github.com/textlint/textlint/edit/master/docs/../docs/faq/exit-status.md","tags":[],"version":"current","lastUpdatedBy":"renovate[bot]","lastUpdatedAt":1753713197000,"frontMatter":{}}');var s=t(7968),r=t(4318);const l={},o="Exit Status",a={},d=[{value:"Exit Status Overview",id:"exit-status-overview",level:2},{value:"Exit Status 2 Details",id:"exit-status-2-details",level:2},{value:"Cases that trigger file search errors",id:"cases-that-trigger-file-search-errors",level:3},{value:"Comparison with ESLint",id:"comparison-with-eslint",level:3},{value:"Detailed Behavior Patterns",id:"detailed-behavior-patterns",level:2},{value:"1. Success Cases (Exit Status: 0)",id:"1-success-cases-exit-status-0",level:3},{value:"1.1 File exists and no lint errors",id:"11-file-exists-and-no-lint-errors",level:4},{value:"1.2 File is ignored",id:"12-file-is-ignored",level:4},{value:"1.3 Multiple files with some non-existent",id:"13-multiple-files-with-some-non-existent",level:4},{value:"1.4 Non-existent ignore file",id:"14-non-existent-ignore-file",level:4},{value:"1.5 All files are ignored",id:"15-all-files-are-ignored",level:4},{value:"1.6 Output file is specified",id:"16-output-file-is-specified",level:4},{value:"1.7 Invalid CLI options",id:"17-invalid-cli-options",level:4},{value:"2. Lint Error Cases (Exit Status: 1)",id:"2-lint-error-cases-exit-status-1",level:3},{value:"2.1 File exists and has lint errors",id:"21-file-exists-and-has-lint-errors",level:4},{value:"3. File Search Error Cases (Exit Status: 2)",id:"3-file-search-error-cases-exit-status-2",level:3},{value:"3.1 Specified file does not exist",id:"31-specified-file-does-not-exist",level:4},{value:"3.2 Glob pattern with no matching files",id:"32-glob-pattern-with-no-matching-files",level:4},{value:"3.3 Absolute path to non-existent file",id:"33-absolute-path-to-non-existent-file",level:4},{value:"3.4 Non-existent directory in glob",id:"34-non-existent-directory-in-glob",level:4},{value:"3.5 <code>--fix</code> option with non-existent file",id:"35---fix-option-with-non-existent-file",level:4},{value:"Comparison with Other Lint Tools",id:"comparison-with-other-lint-tools",level:2},{value:"ESLint",id:"eslint",level:3},{value:"textlint",id:"textlint",level:3},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"1. CI/CD Usage",id:"1-cicd-usage",level:3},{value:"2. Error handling",id:"2-error-handling",level:3},{value:"3. Multiple file processing",id:"3-multiple-file-processing",level:3},{value:"4. Using ignore files",id:"4-using-ignore-files",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Q: File exists but Exit Status 1 is returned",id:"q-file-exists-but-exit-status-1-is-returned",level:3},{value:"Q: Ignore file patterns are not working",id:"q-ignore-file-patterns-are-not-working",level:3},{value:"Q: Behavior with large file sets where some files don&#39;t exist",id:"q-behavior-with-large-file-sets-where-some-files-dont-exist",level:3},{value:"Comparison with ESLint&#39;s <code>--no-error-on-unmatched-pattern</code> Flag",id:"comparison-with-eslints---no-error-on-unmatched-pattern-flag",level:2},{value:"ESLint&#39;s Approach",id:"eslints-approach",level:3},{value:"ESLint Behavior",id:"eslint-behavior",level:4},{value:"Main Use Cases",id:"main-use-cases",level:4},{value:"Comparison with textlint Current Status",id:"comparison-with-textlint-current-status",level:3},{value:"Current Workarounds for textlint",id:"current-workarounds-for-textlint",level:3},{value:"1. Multiple file specification workaround",id:"1-multiple-file-specification-workaround",level:4},{value:"2. Conditional execution workaround",id:"2-conditional-execution-workaround",level:4},{value:"3. Error handling",id:"3-error-handling",level:4},{value:"Future Improvements",id:"future-improvements",level:2},{value:"Proposal: Add <code>--no-error-on-unmatched-pattern</code> Flag",id:"proposal-add---no-error-on-unmatched-pattern-flag",level:3}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"exit-status",children:"Exit Status"})}),"\n",(0,s.jsx)(n.p,{children:"textlint returns different exit status codes based on the result of file processing. This document systematically explains the exit status behavior in various situations."}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),": The patterns described below are covered by comprehensive tests in ",(0,s.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(9650).A+"",children:(0,s.jsx)(n.code,{children:"packages/textlint/test/cli/cli-exit-status-faq.test.ts"})}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"exit-status-overview",children:"Exit Status Overview"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Exit Status"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"0"}),(0,s.jsx)(n.td,{children:"Success - No errors, or no target files (ignored, etc.)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"Failure - Lint errors found"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"2"}),(0,s.jsx)(n.td,{children:"Failure - File search errors or output writing errors"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"exit-status-2-details",children:"Exit Status 2 Details"}),"\n",(0,s.jsx)(n.p,{children:"textlint v15+ returns exit status 2 for file search related errors. This aligns with ESLint's behavior."}),"\n",(0,s.jsx)(n.h3,{id:"cases-that-trigger-file-search-errors",children:"Cases that trigger file search errors"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Specifying non-existent files"}),"\n",(0,s.jsx)(n.li,{children:"Specifying non-existent glob patterns"}),"\n",(0,s.jsx)(n.li,{children:"File system access errors"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"comparison-with-eslint",children:"Comparison with ESLint"}),"\n",(0,s.jsxs)(n.p,{children:["ESLint provides the ",(0,s.jsx)(n.code,{children:"--no-error-on-unmatched-pattern"})," flag to control this behavior, but textlint does not currently implement such a flag."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# ESLint\neslint non-existent.js                              # Exit Status: 2\neslint --no-error-on-unmatched-pattern non-existent.js  # Exit Status: 0\n\n# textlint\ntextlint non-existent.md                           # Exit Status: 2\n"})}),"\n",(0,s.jsx)(n.h2,{id:"detailed-behavior-patterns",children:"Detailed Behavior Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"1-success-cases-exit-status-0",children:"1. Success Cases (Exit Status: 0)"}),"\n",(0,s.jsx)(n.h4,{id:"11-file-exists-and-no-lint-errors",children:"1.1 File exists and no lint errors"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"textlint --rule no-todo existing-file.md\n# Exit Status: 0\n"})}),"\n",(0,s.jsx)(n.h4,{id:"12-file-is-ignored",children:"1.2 File is ignored"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"textlint --rule no-todo --ignore-path .textlintignore ignored-file.md\n# Exit Status: 0\n# Reason: Ignored files are treated as out of scope\n"})}),"\n",(0,s.jsx)(n.h4,{id:"13-multiple-files-with-some-non-existent",children:"1.3 Multiple files with some non-existent"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"textlint --rule no-todo existing-file.md nonexistent-file.md\n# Exit Status: 0\n# Reason: Only existing files are processed\n"})}),"\n",(0,s.jsx)(n.h4,{id:"14-non-existent-ignore-file",children:"1.4 Non-existent ignore file"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"textlint --rule no-todo --ignore-path nonexistent.textlintignore existing-file.md\n# Exit Status: 0\n# Reason: Non-existent ignore files are silently ignored (no error)\n"})}),"\n",(0,s.jsx)(n.h4,{id:"15-all-files-are-ignored",children:"1.5 All files are ignored"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"textlint --rule no-todo --ignore-path ignore-all.textlintignore '*.md'\n# Exit Status: 0\n# Reason: No target files to process is treated as success\n"})}),"\n",(0,s.jsx)(n.h4,{id:"16-output-file-is-specified",children:"1.6 Output file is specified"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"textlint --rule no-todo --output-file output.txt file-with-error.md\n# Exit Status: 0\n# Reason: Always returns 0 when --output-file is specified (same as ESLint)\n"})}),"\n",(0,s.jsx)(n.h4,{id:"17-invalid-cli-options",children:"1.7 Invalid CLI options"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"textlint --invalid-option\n# Exit Status: 1 (when run from command line)\n# Exit Status: 0 (when executed programmatically, shows help)\n# Error message: Error: Invalid option '--invalid-option' - perhaps you meant...\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),": Invalid options behave differently between command line execution and programmatic CLI execution:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Command line: optionator library throws error, exit status 1"}),"\n",(0,s.jsx)(n.li,{children:"Programmatic: Help is displayed, exit status 0"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This difference is due to optionator library's internal implementation and TTY environment differences."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-lint-error-cases-exit-status-1",children:"2. Lint Error Cases (Exit Status: 1)"}),"\n",(0,s.jsx)(n.h4,{id:"21-file-exists-and-has-lint-errors",children:"2.1 File exists and has lint errors"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"textlint --rule no-todo file-with-todo.md\n# Exit Status: 1\n# Reason: Lint errors detected\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-file-search-error-cases-exit-status-2",children:"3. File Search Error Cases (Exit Status: 2)"}),"\n",(0,s.jsx)(n.h4,{id:"31-specified-file-does-not-exist",children:"3.1 Specified file does not exist"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"textlint --rule no-todo nonexistent-file.md\n# Exit Status: 2\n# Error message: Failed to search files. Error details: [ { type: 'SearchFilesNoTargetFileError' } ]\n# File search failed: [ { type: 'SearchFilesNoTargetFileError' } ]\n"})}),"\n",(0,s.jsx)(n.h4,{id:"32-glob-pattern-with-no-matching-files",children:"3.2 Glob pattern with no matching files"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"textlint --rule no-todo 'nonexistent-dir/**/*.md'\n# Exit Status: 2\n# Error message: Failed to search files. Error details: [ { type: 'SearchFilesNoTargetFileError' } ]\n"})}),"\n",(0,s.jsx)(n.h4,{id:"33-absolute-path-to-non-existent-file",children:"3.3 Absolute path to non-existent file"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"textlint --rule no-todo /nonexistent/path/file.md\n# Exit Status: 2\n# Error message: Failed to search files. Error details: [ { type: 'SearchFilesNoTargetFileError' } ]\n"})}),"\n",(0,s.jsx)(n.h4,{id:"34-non-existent-directory-in-glob",children:"3.4 Non-existent directory in glob"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"textlint --rule no-todo '/nonexistent-dir/**/*.md'\n# Exit Status: 2\n# Error message: Failed to search files. Error details: [ { type: 'SearchFilesNoTargetFileError' } ]\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"35---fix-option-with-non-existent-file",children:["3.5 ",(0,s.jsx)(n.code,{children:"--fix"})," option with non-existent file"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"textlint --rule no-todo --fix nonexistent-file.md\n# Exit Status: 2\n# Error message: Failed to search files with patterns: nonexistent-file.md. Reason: SearchFilesNoTargetFileError\n# File search failed: [ { type: 'SearchFilesNoTargetFileError' } ]\n"})}),"\n",(0,s.jsx)(n.h2,{id:"comparison-with-other-lint-tools",children:"Comparison with Other Lint Tools"}),"\n",(0,s.jsx)(n.h3,{id:"eslint",children:"ESLint"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"File not found: Exit Status 2"}),"\n",(0,s.jsx)(n.li,{children:"Lint errors: Exit Status 1"}),"\n",(0,s.jsx)(n.li,{children:"Success: Exit Status 0"}),"\n",(0,s.jsx)(n.li,{children:"--output-file specified: Always Exit Status 0"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"textlint",children:"textlint"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"File not found: Exit Status 2 \u2705"}),"\n",(0,s.jsx)(n.li,{children:"Lint errors: Exit Status 1"}),"\n",(0,s.jsx)(n.li,{children:"Success: Exit Status 0"}),"\n",(0,s.jsx)(n.li,{children:"--output-file specified: Always Exit Status 0"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"textlint follows the same exit status rules as ESLint, allowing scripts to distinguish between file search errors and lint errors."}),"\n",(0,s.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,s.jsx)(n.p,{children:"The implementation of this feature involves:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CLI layer"})," (",(0,s.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(5284).A+"",children:(0,s.jsx)(n.code,{children:"cli.ts"})}),"): Catches ",(0,s.jsx)(n.code,{children:"TextlintFileSearchError"})," and returns exit status 2"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Linter layer"})," (",(0,s.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(1934).A+"",children:(0,s.jsx)(n.code,{children:"createLinter.ts"})}),"): Throws ",(0,s.jsx)(n.code,{children:"TextlintFileSearchError"})," when file search fails"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Error class"})," (",(0,s.jsx)(n.a,{href:"../../packages/textlint/src/error/FileSearchError.ts",children:(0,s.jsx)(n.code,{children:"FileSearchError.ts"})}),"): Custom error class for file search failures"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"1-cicd-usage",children:"1. CI/CD Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Basic usage\ntextlint "**/*.md" && echo "Lint passed"\n\n# Distinguish different error types\ntextlint "**/*.md"\nexit_code=$?\ncase $exit_code in\n  0) echo "Success: No lint errors found" ;;\n  1) echo "Lint errors found" ;;\n  2) echo "File search errors (files not found)" ;;\n  *) echo "Unexpected error" ;;\nesac\n'})}),"\n",(0,s.jsx)(n.h3,{id:"2-error-handling",children:"2. Error handling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Distinguish file search errors from lint errors\ntextlint "**/*.md"\nexit_code=$?\nif [ $exit_code -eq 2 ]; then\n  echo "Warning: Some files not found, but this might be expected"\n  exit 0\nelif [ $exit_code -eq 1 ]; then\n  echo "Error: Lint errors found"\n  exit 1\nfi\n'})}),"\n",(0,s.jsx)(n.h3,{id:"3-multiple-file-processing",children:"3. Multiple file processing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Mixed existing and non-existing files - only existing files are processed\ntextlint existing-file.md nonexistent-file.md  # Exit Status: 0\n\n# Only non-existing files - returns error\ntextlint nonexistent-file.md  # Exit Status: 2\n"})}),"\n",(0,s.jsx)(n.h3,{id:"4-using-ignore-files",children:"4. Using ignore files"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Non-existent ignore files don\'t cause errors\ntextlint --ignore-path .textlintignore "**/*.md"  # Exit Status: 0\n\n# All files ignored is treated as success\ntextlint --ignore-path ignore-all.textlintignore "**/*.md"  # Exit Status: 0\n'})}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"q-file-exists-but-exit-status-1-is-returned",children:"Q: File exists but Exit Status 1 is returned"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"A"}),": Possible causes:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Lint errors are detected"}),"\n",(0,s.jsxs)(n.li,{children:["File is ignored (check ",(0,s.jsx)(n.code,{children:"--ignore-path"}),")"]}),"\n",(0,s.jsx)(n.li,{children:"File extension is not supported"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"q-ignore-file-patterns-are-not-working",children:"Q: Ignore file patterns are not working"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"A"}),": Check the following:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Ignore file path is correct"}),"\n",(0,s.jsx)(n.li,{children:"Pattern syntax is correct (glob format)"}),"\n",(0,s.jsx)(n.li,{children:"File character encoding is correct"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"q-behavior-with-large-file-sets-where-some-files-dont-exist",children:"Q: Behavior with large file sets where some files don't exist"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"A"}),": Only existing files are processed and Exit Status 0 is returned. Exit Status 2 is only returned when all specified files are non-existent."]}),"\n",(0,s.jsxs)(n.h2,{id:"comparison-with-eslints---no-error-on-unmatched-pattern-flag",children:["Comparison with ESLint's ",(0,s.jsx)(n.code,{children:"--no-error-on-unmatched-pattern"})," Flag"]}),"\n",(0,s.jsx)(n.h3,{id:"eslints-approach",children:"ESLint's Approach"}),"\n",(0,s.jsxs)(n.p,{children:["ESLint added the ",(0,s.jsx)(n.code,{children:"--no-error-on-unmatched-pattern"})," flag in ",(0,s.jsx)(n.a,{href:"https://github.com/eslint/eslint/issues/10587",children:"Issue #10587"})," to provide flexible handling when file patterns are not found."]}),"\n",(0,s.jsx)(n.h4,{id:"eslint-behavior",children:"ESLint Behavior"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Default (causes error)\neslint "nonexistent-dir/**/*.js"\n# Exit Status: 2, Error: "No files matching the pattern were found."\n\n# With flag (no error)\neslint --no-error-on-unmatched-pattern "nonexistent-dir/**/*.js"\n# Exit Status: 0\n'})}),"\n",(0,s.jsx)(n.h4,{id:"main-use-cases",children:"Main Use Cases"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Unified lint commands in monorepos"}),": Use the same command even when some directories don't exist in certain projects"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Flexible CI/CD execution"}),": Don't error when files conditionally don't exist"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Docker environments"}),": Run linting on partial project copies"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"comparison-with-textlint-current-status",children:"Comparison with textlint Current Status"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Situation"}),(0,s.jsx)(n.th,{children:"textlint v15+"}),(0,s.jsx)(n.th,{children:"ESLint (default)"}),(0,s.jsx)(n.th,{children:"ESLint (--no-error-on-unmatched-pattern)"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Single non-existent file"}),(0,s.jsx)(n.td,{children:"Exit Status 2 \u2705"}),(0,s.jsx)(n.td,{children:"Exit Status 2"}),(0,s.jsx)(n.td,{children:"Exit Status 0"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Non-existent glob"}),(0,s.jsx)(n.td,{children:"Exit Status 2 \u2705"}),(0,s.jsx)(n.td,{children:"Exit Status 2"}),(0,s.jsx)(n.td,{children:"Exit Status 0"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Multiple files (some non-existent)"}),(0,s.jsx)(n.td,{children:"Exit Status 0"}),(0,s.jsx)(n.td,{children:"Exit Status 0"}),(0,s.jsx)(n.td,{children:"Exit Status 0"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"current-workarounds-for-textlint",children:"Current Workarounds for textlint"}),"\n",(0,s.jsx)(n.h4,{id:"1-multiple-file-specification-workaround",children:"1. Multiple file specification workaround"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# This works with current implementation (Exit Status 0)\ntextlint existing-file.md nonexistent-file.md\n"})}),"\n",(0,s.jsx)(n.h4,{id:"2-conditional-execution-workaround",children:"2. Conditional execution workaround"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Shell conditional\nif [ -d "packages/app" ]; then\n  textlint "packages/app/**/*.md"\nfi\n\n# More complex cases\nfind . -name "*.md" -type f | grep -E "(packages|docs)" | xargs textlint\n'})}),"\n",(0,s.jsx)(n.h4,{id:"3-error-handling",children:"3. Error handling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Distinguish file search errors from lint errors\ntextlint "**/*.md"\nexit_code=$?\nif [ $exit_code -eq 2 ]; then\n  echo "Warning: Some files not found, but this might be expected"\n  exit 0\nelif [ $exit_code -eq 1 ]; then\n  echo "Error: Lint errors found"\n  exit 1\nfi\n'})}),"\n",(0,s.jsx)(n.h2,{id:"future-improvements",children:"Future Improvements"}),"\n",(0,s.jsxs)(n.h3,{id:"proposal-add---no-error-on-unmatched-pattern-flag",children:["Proposal: Add ",(0,s.jsx)(n.code,{children:"--no-error-on-unmatched-pattern"})," Flag"]}),"\n",(0,s.jsx)(n.p,{children:"Adopting the same approach as ESLint could improve usability in monorepos and conditional file processing:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Proposed: Implementation in future versions\ntextlint --no-error-on-unmatched-pattern "nonexistent-dir/**/*.md"\n# Exit Status: 0 (no error even when files are not found)\n'})}),"\n",(0,s.jsx)(n.p,{children:"This feature would provide the following benefits:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Unified configuration in monorepos"}),": Use the same lint command across projects with different directory structures"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CI/CD flexibility"}),": Pipelines don't fail when files conditionally don't exist"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Consistency with ESLint"}),": Predictable behavior for existing ESLint users"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},1934:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/files/createLinter-b48abda3dffc6238d67f2277c9c2749d.ts"},4318:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var i=t(4700);const s={},r=i.createContext(s);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:n},e.children)}},5284:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/files/cli-84e07b1ede96fe50a5ce86a2e4d93fa9.ts"},9650:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/files/cli-exit-status-faq.test-9615c6fe246361bc99861ce539d4636d.ts"}}]);