"use strict";(self.webpackChunktextlint_website=self.webpackChunktextlint_website||[]).push([[9176],{3999:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>a,frontMatter:()=>s,metadata:()=>l,toc:()=>d});const l=JSON.parse('{"id":"filter-rule","title":"Creating Filter Rule","description":"Filter rule is same writing convention with linting/fixing rule, but has different context.","source":"@site/../docs/filter-rule.md","sourceDirName":".","slug":"/filter-rule","permalink":"/textlint/pr-preview/pr-1539/docs/filter-rule","draft":false,"unlisted":false,"editUrl":"https://github.com/textlint/textlint/edit/master/docs/../docs/filter-rule.md","tags":[],"version":"current","lastUpdatedBy":"renovate[bot]","lastUpdatedAt":1751210664000,"frontMatter":{"id":"filter-rule","title":"Creating Filter Rule"},"sidebar":"docs","previous":{"title":"Creating Rules","permalink":"/textlint/pr-preview/pr-1539/docs/rule"},"next":{"title":"Creating Fixable Rule","permalink":"/textlint/pr-preview/pr-1539/docs/rule-fixable"}}');var r=t(7968),i=t(4318);const s={id:"filter-rule",title:"Creating Filter Rule"},o=void 0,c={},d=[{value:"Usage of filter rule",id:"usage-of-filter-rule",level:2},{value:"Filter rule name",id:"filter-rule-name",level:3},{value:"FilterRuleContext",id:"filterrulecontext",level:2},{value:"Example",id:"example",level:2},{value:"Package name convention",id:"package-name-convention",level:2},{value:"Example rules:",id:"example-rules",level:3}];function x(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Filter rule is same writing convention with ",(0,r.jsx)(n.a,{href:"/textlint/pr-preview/pr-1539/docs/rule",children:"linting/fixing rule"}),", but has different context."]}),"\n",(0,r.jsx)(n.h2,{id:"usage-of-filter-rule",children:"Usage of filter rule"}),"\n",(0,r.jsxs)(n.p,{children:["Add filter rule name to ",(0,r.jsx)(n.code,{children:"filters"})," field."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "filters": {\n    "comments": true\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"/textlint/pr-preview/pr-1539/docs/configuring",children:"configuring.md"})," for details."]}),"\n",(0,r.jsx)(n.h3,{id:"filter-rule-name",children:"Filter rule name"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "filters": {\n    "<name>": true\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The rule ",(0,r.jsx)(n.code,{children:"<name>"})," can be accept following patterns:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"textlint-filter-rule-<name>"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"<name>"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"@scope/textlint-filter-rule-<name>"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"@scope/<name>"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"filterrulecontext",children:"FilterRuleContext"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"shouldIgnore()"})," is core API of ",(0,r.jsx)(n.code,{children:"FilterRuleContext"}),"."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"shouldIgnore(range, { ruleId })"})," is a method that report reports ignoring ",(0,r.jsx)(n.code,{children:"range"}),"( is array like ",(0,r.jsx)(n.code,{children:"[start, end]"}),").\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"context.shouldIgnore(node.range);"})," filter all messages"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'context.shouldIgnore(node.range, { ruleId: "rule-id" });'})," filter messages that are reported ",(0,r.jsx)(n.code,{children:'"rule-id"'})," rule."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Syntax.*"})," is const values of ",(0,r.jsx)(n.a,{href:"/textlint/pr-preview/pr-1539/docs/txtnode",children:"TxtNode type"}),".\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["e.g.) ",(0,r.jsx)(n.code,{children:"context.Syntax.Str"})]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/textlint/textlint/blob/master/packages/%40textlint/ast-node-types/src/index.ts",children:"packages/@textlint/ast-node-types/src/index.ts"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"getSource(<node>)"}),"  is a method gets the source code for the given node.\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["e.g.) ",(0,r.jsx)(n.code,{children:'context.getSource(node); // => "text"'})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"getFilePath()"})," return file path that is linting target.\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["e.g.) ",(0,r.jsx)(n.code,{children:"context.getFilePath(): // => /path/to/file.md or undefined"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsxs)(n.p,{children:["Filter all ",(0,r.jsx)(n.code,{children:"BlockQuote"})," node."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'module.exports = function (context) {\n    const exports = {};\n    exports[context.Syntax.BlockQuote] = function (node) {\n        context.shouldIgnore(node.range);\n        /* === \n        context.shouldIgnore(node.range, {\n             ruleId: "*"\n        });\n        */\n    };\n    return exports;\n};\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Filter messages which is reported by ",(0,r.jsx)(n.code,{children:"no-todo"})," rule."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'module.exports = function (context) {\n    const exports = {};\n    exports[context.Syntax.Str] = function (node) {\n        context.shouldIgnore(node.range, {\n            ruleId: "no-todo"\n        });\n    };\n    return exports;\n};\n'})}),"\n",(0,r.jsx)(n.h2,{id:"package-name-convention",children:"Package name convention"}),"\n",(0,r.jsxs)(n.p,{children:["textlint's filter rule should use ",(0,r.jsx)(n.code,{children:"textlint-filter-rule-"})," prefix."]}),"\n",(0,r.jsxs)(n.p,{children:["For example, filtering by comment rule is ",(0,r.jsx)(n.code,{children:"textlint-filter-rule-comments"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"textlint user use it by setting following:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "filters": {\n        "comments": true\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"example-rules",children:"Example rules:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/textlint/textlint-filter-rule-comments",title:"textlint-filter-rule-comments",children:"textlint-filter-rule-comments"})}),"\n"]})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(x,{...e})}):x(e)}},4318:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var l=t(4700);const r={},i=l.createContext(r);function s(e){const n=l.useContext(i);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),l.createElement(i.Provider,{value:n},e.children)}}}]);