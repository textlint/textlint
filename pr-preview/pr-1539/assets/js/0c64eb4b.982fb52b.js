"use strict";(self.webpackChunktextlint_website=self.webpackChunktextlint_website||[]).push([[7573],{4872:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>c});const d=JSON.parse('{"id":"txtnode","title":"TxtAST Interface","description":"TxtAST define AST(Abstract Syntax Tree) for processing in textlint.","source":"@site/../docs/txtnode.md","sourceDirName":".","slug":"/txtnode","permalink":"/textlint/pr-preview/pr-1539/docs/txtnode","draft":false,"unlisted":false,"editUrl":"https://github.com/textlint/textlint/edit/master/docs/../docs/txtnode.md","tags":[],"version":"current","lastUpdatedBy":"renovate[bot]","lastUpdatedAt":1754837531000,"frontMatter":{"id":"txtnode","title":"TxtAST Interface"},"sidebar":"docs","previous":{"title":"Use as Node Modules","permalink":"/textlint/pr-preview/pr-1539/docs/use-as-modules"},"next":{"title":"Contributing Guideline","permalink":"/textlint/pr-preview/pr-1539/docs/contributing"}}');var s=t(1273),r=t(6719);const i={id:"txtnode",title:"TxtAST Interface"},l=void 0,o={},c=[{value:"What is AST?",id:"what-is-ast",level:2},{value:"<code>TxtNode</code>",id:"txtnode",level:3},{value:"<code>TxtTextNode</code>",id:"txttextnode",level:3},{value:"<code>TxtParentNode</code>",id:"txtparentnode",level:3},{value:"<code>type</code>",id:"type",level:3},{value:"All node types",id:"all-node-types",level:3},{value:"Minimal node property",id:"minimal-node-property",level:3},{value:"<code>Header</code>",id:"header",level:4},{value:"<code>Link</code>",id:"link",level:4},{value:"<code>Image</code>",id:"image",level:4},{value:"Built-in Parser",id:"built-in-parser",level:2},{value:"Package",id:"package",level:2},{value:"Online Parsing Demo",id:"online-parsing-demo",level:2},{value:"<code>loc</code>",id:"loc",level:3},{value:"Example",id:"example",level:2},{value:"Unist",id:"unist",level:2},{value:"For testing Processor plugin",id:"for-testing-processor-plugin",level:2}];function x(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"TxtAST define AST(Abstract Syntax Tree) for processing in textlint."}),"\n",(0,s.jsx)(n.h2,{id:"what-is-ast",children:"What is AST?"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Abstract_syntax_tree",title:"Abstract syntax tree - Wikipedia, the free encyclopedia",children:"Abstract syntax tree"})," is a tree representation of the abstract syntactic structure of text."]}),"\n",(0,s.jsxs)(n.p,{children:["textlint's plugin parse text to AST. AST is a tree structure that is consist of ",(0,s.jsx)(n.code,{children:"Txt{{Type}}Node"})," like ",(0,s.jsx)(n.code,{children:"TxtParagraphNode"}),".\nEach node has common properties like ",(0,s.jsx)(n.code,{children:"type"}),", ",(0,s.jsx)(n.code,{children:"raw"}),", ",(0,s.jsx)(n.code,{children:"loc"}),", ",(0,s.jsx)(n.code,{children:"range"})," and ",(0,s.jsx)(n.code,{children:"parent"})," that is defined in ",(0,s.jsx)(n.code,{children:"TxtNode"})," interface."]}),"\n",(0,s.jsx)(n.p,{children:"Each node has own properties that is defined in each node type."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://textlint.org/astexplorer/",children:(0,s.jsx)(n.img,{alt:"textlint ast-explorer",src:t(8779).A+"",width:"1410",height:"757"})})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://textlint.org/astexplorer/",title:"AST explorer for textlint",children:"AST explorer for textlint"})," is useful for understanding AST."]}),"\n",(0,s.jsx)(n.h3,{id:"txtnode",children:(0,s.jsx)(n.code,{children:"TxtNode"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"TxtNode"})," is an abstract node."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"/**\n * Basic TxtNode\n * Probably, Real TxtNode implementation has more properties.\n */\ninterface TxtNode {\n    type: string;\n    raw: string;\n    range: TxtNodeRange;\n    loc: TxtNodeLineLocation;\n    // parent is runtime information\n    // Not need in AST\n    // For example, top Root Node like `Document` has not parent.\n    parent?: TxtNode;\n}\n\n\n/**\n * Location\n */\ninterface TxtNodeLineLocation {\n    start: TxtNodePosition;\n    end: TxtNodePosition;\n}\n\n/**\n * Position's line start with 1.\n * Position's column start with 0.\n * This is for compatibility with JavaScript AST.\n * https://gist.github.com/azu/8866b2cb9b7a933e01fe\n */\ninterface TxtNodePosition {\n    line: number; // start with 1\n    column: number; // start with 0\n}\n\n/**\n * Range start with 0\n */\nexport type TxtNodeRange = readonly [startIndex: number, endIndex: number];\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"TxtNode"})," ",(0,s.jsx)(n.strong,{children:"must"})," have these properties."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"type"}),": type of Node"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"raw"}),": raw value of Node\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["if you want to get raw value, please use ",(0,s.jsx)(n.code,{children:"getSource(<node>)"})," instead of it.."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"loc"}),": location object"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"range"}),": location info array like ",(0,s.jsx)(n.code,{children:"[startIndex, endIndex]"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"parent"}),": (optional) parent node of this node.\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"It is attached in runtime"}),"\n",(0,s.jsx)(n.li,{children:"Parser user ignore this property"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"txttextnode",children:(0,s.jsx)(n.code,{children:"TxtTextNode"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"TxtTextNode"})," is an abstract node that inherit ",(0,s.jsx)(n.code,{children:"TxtNode"})," interface."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"/**\n * Text Node.\n * Text Node has inline value.\n * For example, `Str` Node is a TxtTextNode.\n */\ninterface TxtTextNode extends TxtNode {\n    value: string;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"TxtTextNode"})," ",(0,s.jsx)(n.strong,{children:"must"})," have these properties."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"value"}),": the value of inline node."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Example: ",(0,s.jsx)(n.code,{children:"Str"})," node is a ",(0,s.jsx)(n.code,{children:"TxtTextNode"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"txtparentnode",children:(0,s.jsx)(n.code,{children:"TxtParentNode"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"TxtParentNode"})," is an abstract node that inherit ",(0,s.jsx)(n.code,{children:"TxtNode"})," interface."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"/**\n * Parent Node.\n * Parent Node has children that are consist of TxtNode or TxtTextNode\n */\ninterface TxtParentNode extends TxtNode {\n    children: Array<TxtNode | TxtTextNode>;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"TxtParentNode"})," ",(0,s.jsx)(n.strong,{children:"must"})," have these properties."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"children"}),": child nodes of this node."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Example: ",(0,s.jsx)(n.code,{children:"Paragraph"})," node is a ",(0,s.jsx)(n.code,{children:"TxtParentNode"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"type",children:(0,s.jsx)(n.code,{children:"type"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"type"})," is TxtNode type."]}),"\n",(0,s.jsxs)(n.p,{children:["All Types are defined in ",(0,s.jsx)(n.code,{children:"@textlint/ast-node-types"}),".\nYou can use this ",(0,s.jsx)(n.code,{children:"ASTNodeTypes"})," value via following way:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import { ASTNodeTypes } from "@textlint/ast-node-types";\n\nconsole.log(ASTNodeTypes.Str); // "Str"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["You can get Node type for Type name by ",(0,s.jsx)(n.code,{children:"TypeofTxtNode"})," in TypeScript."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'// In TypeScript\nimport { ASTNodeTypes } from "@textlint/ast-node-types";\n\nconst nodeType = TypeofTxtNode<ASTNodeTypes.Str>; // TxtTextNode\n'})}),"\n",(0,s.jsx)(n.h3,{id:"all-node-types",children:"All node types"}),"\n",(0,s.jsxs)(n.p,{children:["These types are defined in ",(0,s.jsx)(n.a,{href:"https://github.com/textlint/textlint/tree/master/packages/%40textlint/ast-node-types",children:(0,s.jsx)(n.code,{children:"@textlint/ast-node-types"})}),"."]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Type name"}),(0,s.jsx)(n.th,{children:"Node type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.Document"}),(0,s.jsx)(n.td,{children:"TxtDocumentNode(TxtParentNode)"}),(0,s.jsx)(n.td,{children:"Root Node"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.DocumentExit"}),(0,s.jsx)(n.td,{children:"TxtDocumentNode(TxtParentNode)"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.Paragraph"}),(0,s.jsx)(n.td,{children:"TxtParagraphNode(TxtParentNode)"}),(0,s.jsx)(n.td,{children:"Paragraph Node"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.ParagraphExit"}),(0,s.jsx)(n.td,{children:"TxtParagraphNode(TxtParentNode)"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.BlockQuote"}),(0,s.jsx)(n.td,{children:"TxtBlockQuoteNode(TxtParentNode)"}),(0,s.jsx)(n.td,{children:"> Block Quote Node"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.BlockQuoteExit"}),(0,s.jsx)(n.td,{children:"TxtBlockQuoteNode(TxtParentNode)"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.List"}),(0,s.jsx)(n.td,{children:"TxtListNode(TxtParentNode)"}),(0,s.jsx)(n.td,{children:"List Node"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.ListExit"}),(0,s.jsx)(n.td,{children:"TxtListNode(TxtParentNode)"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.ListItem"}),(0,s.jsx)(n.td,{children:"TxtListItemNode(TxtParentNode)"}),(0,s.jsx)(n.td,{children:"List (each) item Node"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.ListItemExit"}),(0,s.jsx)(n.td,{children:"TxtListItemNode(TxtParentNode)"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.Header"}),(0,s.jsx)(n.td,{children:"TxtHeaderNode(TxtParentNode)"}),(0,s.jsx)(n.td,{children:"# Header Node"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.HeaderExit"}),(0,s.jsx)(n.td,{children:"TxtHeaderNode(TxtParentNode)"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.CodeBlock"}),(0,s.jsx)(n.td,{children:"TxtCodeBlockNode"}),(0,s.jsx)(n.td,{children:"Code Block Node"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.CodeBlockExit"}),(0,s.jsx)(n.td,{children:"TxtCodeBlockNode"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.HtmlBlock"}),(0,s.jsx)(n.td,{children:"TxtHtmlBlockNode(TxtParentNode)"}),(0,s.jsx)(n.td,{children:"HTML Block Node"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.HtmlBlockExit"}),(0,s.jsx)(n.td,{children:"TxtHtmlBlockNode(TxtParentNode)"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.Link"}),(0,s.jsx)(n.td,{children:"TxtLinkNode(TxtParentNode)"}),(0,s.jsx)(n.td,{children:"Link Node"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.LinkExit"}),(0,s.jsx)(n.td,{children:"TxtLinkNode(TxtParentNode)"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.LinkReference"}),(0,s.jsx)(n.td,{children:"TxtLinkReferenceNode(TxtParentNode)"}),(0,s.jsxs)(n.td,{children:["Link Reference Node(",(0,s.jsx)(n.code,{children:"[link][1]"}),")"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.LinkReferenceExit"}),(0,s.jsx)(n.td,{children:"TxtLinkReferenceNode(TxtParentNode)"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.Delete"}),(0,s.jsx)(n.td,{children:"TxtDeleteNode(TxtParentNode)"}),(0,s.jsxs)(n.td,{children:["Delete Node(",(0,s.jsx)(n.code,{children:"~Str~"}),")"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.DeleteExit"}),(0,s.jsx)(n.td,{children:"TxtDeleteNode(TxtParentNode)"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.Emphasis"}),(0,s.jsx)(n.td,{children:"TxtEmphasisNode(TxtParentNode)"}),(0,s.jsxs)(n.td,{children:["Emphasis(",(0,s.jsx)(n.code,{children:"*Str*"}),")"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.EmphasisExit"}),(0,s.jsx)(n.td,{children:"TxtEmphasisNode(TxtParentNode)"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.Strong"}),(0,s.jsx)(n.td,{children:"TxtStrongNode(TxtParentNode)"}),(0,s.jsxs)(n.td,{children:["Strong Node(",(0,s.jsx)(n.code,{children:"**Str**"}),")"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.StrongExit"}),(0,s.jsx)(n.td,{children:"TxtStrongNode(TxtParentNode)"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.Break"}),(0,s.jsx)(n.td,{children:"TxtBreakNode"}),(0,s.jsxs)(n.td,{children:["Hard Break Node(",(0,s.jsx)(n.code,{children:"Str<space><space>"}),")"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.BreakExit"}),(0,s.jsx)(n.td,{children:"TxtBreakNode"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.Image"}),(0,s.jsx)(n.td,{children:"TxtImageNode"}),(0,s.jsx)(n.td,{children:"Image Node"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.ImageExit"}),(0,s.jsx)(n.td,{children:"TxtImageNode"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.ImageReference"}),(0,s.jsx)(n.td,{children:"TxtImageReferenceNode"}),(0,s.jsxs)(n.td,{children:["Image Reference Node(",(0,s.jsx)(n.code,{children:"![alt][1]"}),")"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.ImageReferenceExit"}),(0,s.jsx)(n.td,{children:"TxtImageReferenceNode"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.Definition"}),(0,s.jsx)(n.td,{children:"TxtDefinitionNode"}),(0,s.jsxs)(n.td,{children:["Definition Node(",(0,s.jsx)(n.code,{children:"[1]: https://example.com"}),")"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.DefinitionExit"}),(0,s.jsx)(n.td,{children:"TxtDefinitionNode"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.HorizontalRule"}),(0,s.jsx)(n.td,{children:"TxtHorizontalRuleNode"}),(0,s.jsxs)(n.td,{children:["Horizontal Node(",(0,s.jsx)(n.code,{children:"---"}),")"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.HorizontalRuleExit"}),(0,s.jsx)(n.td,{children:"TxtHorizontalRuleNode"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.Comment"}),(0,s.jsx)(n.td,{children:"TxtCommentNode"}),(0,s.jsx)(n.td,{children:"Comment Node"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.CommentExit"}),(0,s.jsx)(n.td,{children:"TxtCommentNode"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.Str"}),(0,s.jsx)(n.td,{children:"TxtStrNode"}),(0,s.jsx)(n.td,{children:"Str Node"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.StrExit"}),(0,s.jsx)(n.td,{children:"TxtStrNode"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.Code"}),(0,s.jsx)(n.td,{children:"TxtCodeNode"}),(0,s.jsx)(n.td,{children:"Inline Code Node"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.CodeExit"}),(0,s.jsx)(n.td,{children:"TxtCodeNode"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.Html"}),(0,s.jsx)(n.td,{children:"TxtHtmlNode"}),(0,s.jsx)(n.td,{children:"Inline HTML Node"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.HtmlExit"}),(0,s.jsx)(n.td,{children:"TxtHtmlNode"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.Table"}),(0,s.jsx)(n.td,{children:"TxtTableNode"}),(0,s.jsx)(n.td,{children:"Table Node. textlint 13+"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.TableExit"}),(0,s.jsx)(n.td,{children:"TxtTableNode"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.TableRow"}),(0,s.jsx)(n.td,{children:"TxtTableRowNode"}),(0,s.jsx)(n.td,{children:"Table row Node. textlint 13+"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.TableRowExit"}),(0,s.jsx)(n.td,{children:"TxtTableRowNode"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.TableCell"}),(0,s.jsx)(n.td,{children:"TxtTableCellNode"}),(0,s.jsx)(n.td,{children:"Table cell Node. textlint 13+"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ASTNodeTypes.TableCellExit"}),(0,s.jsx)(n.td,{children:"TxtTableCellNode"}),(0,s.jsx)(n.td,{})]})]})]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["\ud83d\udcddNote\n",(0,s.jsx)(n.code,{children:"LinkReference"}),", ",(0,s.jsx)(n.code,{children:"ImageReference"})," and ",(0,s.jsx)(n.code,{children:"Definition"})," are introduced in textlint ",(0,s.jsx)(n.a,{href:"https://github.com/textlint/textlint/releases/tag/v14.5.0",children:"v14.5.0"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Some node have additional properties.\nFor example, ",(0,s.jsx)(n.code,{children:"TxtHeaderNode"})," has ",(0,s.jsx)(n.code,{children:"level"})," property."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'export interface TxtHeaderNode extends TxtParentNode {\n    type: "Header";\n    depth: 1 | 2 | 3 | 4 | 5 | 6;\n    children: PhrasingContent[];\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["For more details, see ",(0,s.jsx)(n.a,{href:"https://github.com/textlint/textlint/tree/master/packages/%40textlint/ast-node-types",children:(0,s.jsx)(n.code,{children:"@textlint/ast-node-types"})}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/textlint/textlint/tree/master/packages/%40textlint/ast-node-types/src/NodeType.ts",children:(0,s.jsx)(n.code,{children:"@textlint/ast-node-types/src/NodeType.ts"})}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["These type are based on HTML tag and Markdown syntax.\nOther plugin has defined other node type that is not defined in ",(0,s.jsx)(n.code,{children:"@textlint/ast-node-types"}),", but you can specify it as just a string."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'// A rule can treat "Example" node type\nexport default () => {\n    return {\n        ["Example"](node) {\n            // do something\n        }\n    };\n};\n'})}),"\n",(0,s.jsx)(n.h3,{id:"minimal-node-property",children:"Minimal node property"}),"\n",(0,s.jsxs)(n.p,{children:["TxtAST allow to extend node property.\nBut, Following node ",(0,s.jsx)(n.strong,{children:"should"})," have some properties."]}),"\n",(0,s.jsx)(n.h4,{id:"header",children:(0,s.jsx)(n.code,{children:"Header"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"depth"}),": level of header\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Example: ",(0,s.jsx)(n.code,{children:"<h1>"})," is ",(0,s.jsx)(n.code,{children:"depth:1"}),", ",(0,s.jsx)(n.code,{children:"<h2>"})," is ",(0,s.jsx)(n.code,{children:"depth:2"}),"..."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"link",children:(0,s.jsx)(n.code,{children:"Link"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"url"}),": link url"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"image",children:(0,s.jsx)(n.code,{children:"Image"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"url"}),": image url"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"built-in-parser",children:"Built-in Parser"}),"\n",(0,s.jsx)(n.p,{children:"textlint has built-in parsers."}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Package"}),(0,s.jsx)(n.th,{children:"Version"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://github.com/textlint/textlint/tree/master/packages/@textlint/markdown-to-ast",children:(0,s.jsx)(n.code,{children:"@textlint/markdown-to-ast"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/@textlint/markdown-to-ast",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/npm/v/@textlint/markdown-to-ast.svg?style=flat-square",alt:"npm"})})}),(0,s.jsx)(n.td,{children:"markdown parser"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://github.com/textlint/textlint/tree/master/packages/@textlint/text-to-ast",children:(0,s.jsx)(n.code,{children:"@textlint/text-to-ast"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/@textlint/text-to-ast",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/npm/v/@textlint/text-to-ast.svg?style=flat-square",alt:"npm"})})}),(0,s.jsx)(n.td,{children:"plain text parser"})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["If you want to get other type, please ",(0,s.jsx)(n.a,{href:"https://github.com/textlint/textlint/issues/new",children:"create new issue"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"package",children:"Package"}),"\n",(0,s.jsxs)(n.p,{children:["That ",(0,s.jsx)(n.code,{children:"TxtNode"})," interface is defined in ",(0,s.jsx)(n.a,{href:"https://github.com/textlint/textlint/tree/master/packages/@textlint/ast-node-types",children:"packages/ast-node-types"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["If you want to use this interface from TypeScript, ",(0,s.jsx)(n.a,{href:"https://github.com/textlint/textlint/tree/master/packages/@textlint/ast-node-types",children:"packages/ast-node-types"})," is useful."]}),"\n",(0,s.jsx)(n.h2,{id:"online-parsing-demo",children:"Online Parsing Demo"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://textlint.org/astexplorer/",children:(0,s.jsx)(n.img,{alt:"ast-explorer fork",src:t(8779).A+"",width:"1410",height:"757"})})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://textlint.org/astexplorer/",title:"AST explorer for textlint",children:"AST explorer for textlint"})," is useful for understanding AST."]}),"\n",(0,s.jsx)(n.p,{children:"Minimum(recommended) rules is following code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"/**\n * @param {RuleContext} context\n */\nexport default function(context) {\n    const { Syntax } = context;\n    // root object\n    return {\n        [Syntax.Document](node) {\n        },\n        [Syntax.Paragraph](node) {\n        },\n        [Syntax.Str](node) {\n        }\n    };\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"loc",children:(0,s.jsx)(n.code,{children:"loc"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"loc"})," is location info object."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "loc": {\n    "start": {\n      "line": 2,\n      "column": 4\n    },\n    "end": {\n      "line": 2,\n      "column": 10\n    }\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"line"})," of location start with 1 (1-indexed)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"column"})," of location start with 0 (",(0,s.jsx)(n.strong,{children:"0-indexed"}),")."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This is for compatibility with JavaScript AST."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsxs)(n.a,{href:"https://gist.github.com/azu/8866b2cb9b7a933e01fe",title:"Why do `line` of location in JavaScript AST(ESTree) start with 1 and not 0?",children:["Why do ",(0,s.jsx)(n.code,{children:"line"})," of location in JavaScript AST(ESTree) start with 1 and not 0?"]})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Important Note:"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Text -> AST TxtNode(",(0,s.jsx)(n.strong,{children:"0-based columns"})," here) -> textlint -> TextLintMessage(1-based columns)"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"TxtNode"})," has ",(0,s.jsx)(n.strong,{children:"0-based columns"}),", but the result of linting named ",(0,s.jsx)(n.code,{children:"TextLintMessage"})," has ",(0,s.jsx)(n.strong,{children:"1-based columns"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["In other word, textlint's rule handle ",(0,s.jsx)(n.code,{children:"TxtNode"}),", but ",(0,s.jsx)(n.a,{href:"/textlint/pr-preview/pr-1539/docs/formatter",title:"Formatter",children:"formatter"})," handle ",(0,s.jsx)(n.code,{children:"TextLintMessage"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsxs)(n.p,{children:["Input: ",(0,s.jsx)(n.code,{children:"*text*"})]}),"\n",(0,s.jsxs)(n.p,{children:["Output: The AST by ",(0,s.jsx)(n.a,{href:"https://textlint.org/astexplorer/",title:"AST explorer for textlint",children:"AST explorer for textlint"})," + Markdown"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "type": "Document",\n  "children": [\n    {\n      "type": "Paragraph",\n      "children": [\n        {\n          "type": "Emphasis",\n          "children": [\n            {\n              "type": "Str",\n              "value": "text",\n              "loc": {\n                "start": {\n                  "line": 1,\n                  "column": 1\n                },\n                "end": {\n                  "line": 1,\n                  "column": 5\n                }\n              },\n              "range": [\n                1,\n                5\n              ],\n              "raw": "text"\n            }\n          ],\n          "loc": {\n            "start": {\n              "line": 1,\n              "column": 0\n            },\n            "end": {\n              "line": 1,\n              "column": 6\n            }\n          },\n          "range": [\n            0,\n            6\n          ],\n          "raw": "*text*"\n        }\n      ],\n      "loc": {\n        "start": {\n          "line": 1,\n          "column": 0\n        },\n        "end": {\n          "line": 1,\n          "column": 6\n        }\n      },\n      "range": [\n        0,\n        6\n      ],\n      "raw": "*text*"\n    }\n  ],\n  "loc": {\n    "start": {\n      "line": 1,\n      "column": 0\n    },\n    "end": {\n      "line": 1,\n      "column": 6\n    }\n  },\n  "range": [\n    0,\n    6\n  ],\n  "raw": "*text*"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Illustration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"          *   text   *\n          |   |__|   |\n          |   value  |\n          |__________|\n               raw\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Document is a ",(0,s.jsx)(n.code,{children:"TxtParentNode"})," and type is Document\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["have ",(0,s.jsx)(n.code,{children:"children"}),", but not have ",(0,s.jsx)(n.code,{children:"value"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Paragraph is a ",(0,s.jsx)(n.code,{children:"TxtParentNode"})," and type is Paragraph\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["have ",(0,s.jsx)(n.code,{children:"children"}),", but not have ",(0,s.jsx)(n.code,{children:"value"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"Emphasis"})," is a ",(0,s.jsx)(n.code,{children:"TxtTextNode"})," and type is Emphasis\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["have ",(0,s.jsx)(n.code,{children:"value"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:['"text" is a ',(0,s.jsx)(n.code,{children:"TxtTextNode"})," and type is Str\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["have ",(0,s.jsx)(n.code,{children:"value"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"unist",children:"Unist"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"TxtAST"})," have a minimum of compatibility for ",(0,s.jsx)(n.a,{href:"https://github.com/syntax-tree/unist",title:"wooorm/unist: Universal Syntax Tree",children:"unist: Universal Syntax Tree"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["We have discussed Unist in ",(0,s.jsx)(n.a,{href:"https://github.com/textlint/textlint/issues/141",title:"Compliances tests for TxtNode #141",children:"Compliances tests for TxtNode #141"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"for-testing-processor-plugin",children:"For testing Processor plugin"}),"\n",(0,s.jsxs)(n.p,{children:["You can use ",(0,s.jsx)(n.a,{href:"https://github.com/textlint/textlint/tree/master/packages/@textlint/ast-tester",title:"@textlint/ast-tester",children:"@textlint/ast-tester"})," for testing your processor plugin's parser."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/textlint/textlint/tree/master/packages/@textlint/ast-tester",children:"textlint/@textlint/ast-tester: Compliance tests for textlint's AST"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import { test, isTxtAST } from "@textlint/ast-tester";\n// your implement\nimport yourParse from "your-parser";\n// recommenced: test much pattern test\nconst AST = yourParse("This is text");\n\n// Validate AST\ntest(AST); // if the AST is invalid, then throw Error\n\nisTxtAST(AST); // true or false\n'})}),"\n",(0,s.jsxs)(n.p,{children:["\u26a0\ufe0f Current ",(0,s.jsx)(n.code,{children:"test"})," function does not check node specific properties.\nFor example, ",(0,s.jsx)(n.code,{children:"TxtHeaderNode"})," has ",(0,s.jsx)(n.code,{children:"level"})," property, but ",(0,s.jsx)(n.code,{children:"test"})," function does not check it."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Issue: ",(0,s.jsx)(n.a,{href:"https://github.com/textlint/textlint/issues/1009",children:"ast-tester should validate individual Node type \xb7 Issue #1009 \xb7 textlint/textlint"})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(x,{...e})}):x(e)}},6719:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var d=t(3917);const s={},r=d.createContext(s);function i(e){const n=d.useContext(r);return d.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),d.createElement(r.Provider,{value:n},e.children)}},8779:(e,n,t)=>{t.d(n,{A:()=>d});const d=t.p+"assets/images/ast-explorer-1dc880dfc63fd6e3df6edd08f5d1fbea.png"}}]);