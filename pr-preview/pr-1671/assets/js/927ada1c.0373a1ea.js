"use strict";(self.webpackChunktextlint_website=self.webpackChunktextlint_website||[]).push([[3259],{4318:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var s=t(4700);const i={},r=s.createContext(i);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:n},e.children)}},8415:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"formatter","title":"Formatter","description":"Result of linting","source":"@site/../docs/formatter.md","sourceDirName":".","slug":"/formatter","permalink":"/textlint/pr-preview/pr-1671/docs/formatter","draft":false,"unlisted":false,"editUrl":"https://github.com/textlint/textlint/edit/master/docs/../docs/formatter.md","tags":[],"version":"current","lastUpdatedBy":"azu","lastUpdatedAt":1753584799000,"frontMatter":{"id":"formatter","title":"Formatter"},"sidebar":"docs","previous":{"title":"Plugin","permalink":"/textlint/pr-preview/pr-1671/docs/plugin"},"next":{"title":"Use as Node Modules","permalink":"/textlint/pr-preview/pr-1671/docs/use-as-modules"}}');var i=t(7968),r=t(4318);const l={id:"formatter",title:"Formatter"},a=void 0,o={},d=[{value:"Result of linting",id:"result-of-linting",level:2},{value:"Severity Levels",id:"severity-levels",level:3},{value:"Simple usage from Command line",id:"simple-usage-from-command-line",level:3},{value:"Result of fixing",id:"result-of-fixing",level:2},{value:"Simple usage from Command line",id:"simple-usage-from-command-line-1",level:3},{value:"How to get source code from result?",id:"how-to-get-source-code-from-result",level:2},{value:"Built-in formatter",id:"built-in-formatter",level:2},{value:"Custom Formatter",id:"custom-formatter",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"result-of-linting",children:"Result of linting"}),"\n",(0,i.jsxs)(n.p,{children:["Pass following array of ",(0,i.jsx)(n.code,{children:"TextLintResult"})," to reporter module."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// results of linting\nconst results = [\n    // TextLintResult object\n    {\n        filePath: "./myfile.md",\n        messages: [\n            // TextLintMessage object\n            {\n                type: "lint",\n                ruleId: "semi",\n                line: 1,\n                column: 23,\n                message: "Expected a semicolon.",\n                severity: 2  // error\n            },\n            {\n                type: "lint", \n                ruleId: "style-guide",\n                line: 2,\n                column: 1,\n                message: "Consider using a more concise expression.",\n                severity: 3  // info\n            }\n        ]\n    }\n];\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"TextLintMessage"})," and ",(0,i.jsx)(n.code,{children:"TextLintResult"})," are defined as follows."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'export class TextlintMessage {\n    // See src/shared/type/MessageType.js\n    // Message Type\n    type: string;\n    // Rule Id\n    ruleId: string;\n    message: string;\n    // optional data\n    data?: any;\n    // FixCommand\n    fix?: TextlintFixCommand;\n    // location info\n    // Text -> AST TxtNode(0-based columns) -> textlint -> TextlintMessage(**1-based columns**)\n    line: number; // start with 1\n    column: number; // start with 1\n    // indexed-location\n    index: number; // start with 0\n    // Severity Level\n    // 1: warning, 2: error, 3: info\n    severity: number;\n}\n\n// Linting result\nexport interface TextlintResult {\n    filePath: string;\n    messages: TextlintMessage[];\n}\n\n// "range" will be replaced by "text"\nexport class TextlintFixCommand {\n    text: string;\n    range: [number, number];\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"severity-levels",children:"Severity Levels"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"severity"})," property in ",(0,i.jsx)(n.code,{children:"TextlintMessage"})," indicates the severity level of the message:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"1"}),": ",(0,i.jsx)(n.strong,{children:"warning"})," - Issues that should be addressed but don't prevent the text from being processed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"2"}),": ",(0,i.jsx)(n.strong,{children:"error"})," - Critical issues that need to be fixed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"3"}),": ",(0,i.jsx)(n.strong,{children:"info"})," - Informational messages for guidance or suggestions"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'{\n    ruleId: "example-rule",\n    line: 1,\n    column: 10,\n    message: "This is an informational message",\n    severity: 3  // info level\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["It is compatible for ",(0,i.jsx)(n.a,{href:"https://eslint.org/docs/developer-guide/working-with-custom-formatters",title:"Documentation - ESLint - Pluggable JavaScript linter",children:"ESLint formatter"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"simple-usage-from-command-line",children:"Simple usage from Command line"}),"\n",(0,i.jsxs)(n.p,{children:["We can get the raw output to stdout using ",(0,i.jsx)(n.code,{children:"json"})," formatter."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:'$ textlint --format json <file>\n[\n    // TextLintResult object\n    {\n        filePath: "./myfile.md",\n        messages: [\n            // TextLintMessage object\n            {\n                ruleId: "semi",\n                line: 1,\n                column: 23,\n                message: "Expected a semicolon.",\n                severity: 2\n            }\n        ]\n    }\n];\n'})}),"\n",(0,i.jsx)(n.h2,{id:"result-of-fixing",children:"Result of fixing"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"textlint"})," support ",(0,i.jsx)(n.a,{href:"/textlint/pr-preview/pr-1671/docs/rule-fixable",children:"fixable rule"})]}),"\n",(0,i.jsx)(n.p,{children:"Fixable result is a bit difference for things of linting."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// results of fixing\nconst results = [\n    // TextLintFixResult\n    {\n        filePath: "./myfile.md",\n        // fixed content string\n        output: "fixed content",\n        // applied fixable messages\n        // messages is an array of `TextLintMessage`\n        applyingMessages: [],\n        // not fixable messages\n        // messages is an array of `TextLintMessage`\n        remainingMessages: [],\n        // messages is the same one of `TextLintResult`\n        // pre-applyingMessages + remainingMessages\n        // messages is an array of `TextLintMessage`\n        messages: []\n    }\n];\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"TextLintFixResult"})," is defined as follows."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Fixing result\nexport interface TextlintFixResult {\n    filePath: string;\n    // fixed content\n    output: string;\n    // all messages = pre-applyingMessages + remainingMessages\n    // it is same with one of `TextlintResult`\n    messages: TextlintMessage[];\n    // applied fixable messages\n    applyingMessages: TextlintMessage[];\n    // original means original for applyingMessages and remainingMessages\n    // pre-applyingMessages + remainingMessages\n    remainingMessages: TextlintMessage[];\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"It is not compatible for ESLint."}),"\n",(0,i.jsx)(n.h3,{id:"simple-usage-from-command-line-1",children:"Simple usage from Command line"}),"\n",(0,i.jsxs)(n.p,{children:["We can get the raw output to stdout using ",(0,i.jsx)(n.code,{children:"json"})," formatter."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:'$ textlint --fix --format json <file>\n[\n  {\n    "filePath": "./myfile.md",\n    "output": "content string",\n    "messages": [],\n    "applyingMessages": [],\n    "remainingMessages": []\n  }\n]\n'})}),"\n",(0,i.jsx)(n.h2,{id:"how-to-get-source-code-from-result",children:"How to get source code from result?"}),"\n",(0,i.jsxs)(n.p,{children:["You can read the source code from ",(0,i.jsx)(n.code,{children:"filePath"})," property."]}),"\n",(0,i.jsx)(n.h2,{id:"built-in-formatter",children:"Built-in formatter"}),"\n",(0,i.jsxs)(n.p,{children:["textlint use ",(0,i.jsx)(n.code,{children:"@textlint/linter-formatter"})," module as built-in formatter."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/textlint/textlint/blob/master/packages/%40textlint/linter-formatter/README.md",title:"@textlint/linter-formatter",children:"@textlint/linter-formatter"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"custom-formatter",children:"Custom Formatter"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"textlint -f <package-name>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["e.g.) ",(0,i.jsx)(n.a,{href:"https://github.com/azu/textlint-formatter-codecov/tree/a5b93248e9c1d5719684b16ff87342d8654e2aa0",title:"textlint-formatter-codecov",children:"textlint-formatter-codecov"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"textlint -f textlint-formatter-codecov\n# ==\ntextlint -f codecov\n"})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);